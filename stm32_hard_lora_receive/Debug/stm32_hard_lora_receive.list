
stm32_hard_lora_receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003618  08003618  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  0800362c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800362c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b72a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d0  00000000  00000000  0002b766  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002d038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002dc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020dfc  00000000  00000000  0002e700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000848f  00000000  00000000  0004f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c959f  00000000  00000000  0005798b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  00120fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035e8 	.word	0x080035e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035e8 	.word	0x080035e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004c8:	b4b0      	push	{r4, r5, r7}
 80004ca:	b08f      	sub	sp, #60	; 0x3c
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 868       ;
 80004d0:	f44f 7359 	mov.w	r3, #868	; 0x364
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004d6:	2307      	movs	r3, #7
 80004d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004dc:	2307      	movs	r3, #7
 80004de:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e2:	2301      	movs	r3, #1
 80004e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004e8:	23ff      	movs	r3, #255	; 0xff
 80004ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004ee:	2364      	movs	r3, #100	; 0x64
 80004f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f4:	2308      	movs	r3, #8
 80004f6:	86bb      	strh	r3, [r7, #52]	; 0x34


	return new_LoRa;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	461d      	mov	r5, r3
 80004fc:	f107 040c 	add.w	r4, r7, #12
 8000500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800050c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	373c      	adds	r7, #60	; 0x3c
 8000514:	46bd      	mov	sp, r7
 8000516:	bcb0      	pop	{r4, r5, r7}
 8000518:	4770      	bx	lr

0800051a <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6898      	ldr	r0, [r3, #8]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	899b      	ldrh	r3, [r3, #12]
 800052a:	2200      	movs	r2, #0
 800052c:	4619      	mov	r1, r3
 800052e:	f001 fa85 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 ffb4 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6898      	ldr	r0, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	899b      	ldrh	r3, [r3, #12]
 8000540:	2201      	movs	r2, #1
 8000542:	4619      	mov	r1, r3
 8000544:	f001 fa7a 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f000 ffa9 	bl	80014a0 <HAL_Delay>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000556:	b580      	push	{r7, lr}
 8000558:	b084      	sub	sp, #16
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000560:	2101      	movs	r1, #1
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f9b1 	bl	80008ca <LoRa_read>
 8000568:	4603      	mov	r3, r0
 800056a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d107      	bne.n	8000586 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000576:	7bbb      	ldrb	r3, [r7, #14]
 8000578:	f023 0307 	bic.w	r3, r3, #7
 800057c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	61da      	str	r2, [r3, #28]
 8000584:	e03e      	b.n	8000604 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d10c      	bne.n	80005a6 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800058c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000590:	f023 0307 	bic.w	r3, r3, #7
 8000594:	b25b      	sxtb	r3, r3
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	b25b      	sxtb	r3, r3
 800059c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2201      	movs	r2, #1
 80005a2:	61da      	str	r2, [r3, #28]
 80005a4:	e02e      	b.n	8000604 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2b03      	cmp	r3, #3
 80005aa:	d10c      	bne.n	80005c6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b0:	f023 0307 	bic.w	r3, r3, #7
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	f043 0303 	orr.w	r3, r3, #3
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2203      	movs	r2, #3
 80005c2:	61da      	str	r2, [r3, #28]
 80005c4:	e01e      	b.n	8000604 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d10c      	bne.n	80005e6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d0:	f023 0307 	bic.w	r3, r3, #7
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	f043 0305 	orr.w	r3, r3, #5
 80005da:	b25b      	sxtb	r3, r3
 80005dc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2205      	movs	r2, #5
 80005e2:	61da      	str	r2, [r3, #28]
 80005e4:	e00e      	b.n	8000604 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d10b      	bne.n	8000604 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f0:	f023 0307 	bic.w	r3, r3, #7
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	f043 0306 	orr.w	r3, r3, #6
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2206      	movs	r2, #6
 8000602:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	461a      	mov	r2, r3
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f978 	bl	8000900 <LoRa_write>
	//HAL_Delay(10);
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4613      	mov	r3, r2
 8000626:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 100 ;
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fa00 	bl	8001a3c <HAL_GPIO_WritePin>
	cnt = HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f001 fea4 	bl	8002394 <HAL_SPI_Transmit>
 800064c:	4603      	mov	r3, r0
 800064e:	75fb      	strb	r3, [r7, #23]
	while ((cnt = HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY))
 8000650:	bf00      	nop
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fa7b 	bl	8002b52 <HAL_SPI_GetState>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	75fb      	strb	r3, [r7, #23]
 800066a:	7dfb      	ldrb	r3, [r7, #23]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f0      	bne.n	8000652 <LoRa_readReg+0x3a>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6998      	ldr	r0, [r3, #24]
 8000674:	8c3a      	ldrh	r2, [r7, #32]
 8000676:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800067a:	6839      	ldr	r1, [r7, #0]
 800067c:	f001 ffbe 	bl	80025fc <HAL_SPI_Receive>
	while ((cnt = HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY))
 8000680:	bf00      	nop
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fa63 	bl	8002b52 <HAL_SPI_GetState>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	bf14      	ite	ne
 8000692:	2301      	movne	r3, #1
 8000694:	2300      	moveq	r3, #0
 8000696:	b2db      	uxtb	r3, r3
 8000698:	75fb      	strb	r3, [r7, #23]
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f0      	bne.n	8000682 <LoRa_readReg+0x6a>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	889b      	ldrh	r3, [r3, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	4619      	mov	r1, r3
 80006ac:	f001 f9c6 	bl	8001a3c <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f9b2 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6998      	ldr	r0, [r3, #24]
 80006dc:	88fa      	ldrh	r2, [r7, #6]
 80006de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e2:	68b9      	ldr	r1, [r7, #8]
 80006e4:	f001 fe56 	bl	8002394 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006e8:	bf00      	nop
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fa2f 	bl	8002b52 <HAL_SPI_GetState>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d1f7      	bne.n	80006ea <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6998      	ldr	r0, [r3, #24]
 80006fe:	8b3a      	ldrh	r2, [r7, #24]
 8000700:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000704:	6839      	ldr	r1, [r7, #0]
 8000706:	f001 fe45 	bl	8002394 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800070a:	bf00      	nop
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fa1e 	bl	8002b52 <HAL_SPI_GetState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d1f7      	bne.n	800070c <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	889b      	ldrh	r3, [r3, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	4619      	mov	r1, r3
 8000728:	f001 f988 	bl	8001a3c <HAL_GPIO_WritePin>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	04db      	lsls	r3, r3, #19
 8000742:	115b      	asrs	r3, r3, #5
 8000744:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	461a      	mov	r2, r3
 8000750:	2106      	movs	r1, #6
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f8d4 	bl	8000900 <LoRa_write>
	HAL_Delay(5);
 8000758:	2005      	movs	r0, #5
 800075a:	f000 fea1 	bl	80014a0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000764:	7afb      	ldrb	r3, [r7, #11]
 8000766:	461a      	mov	r2, r3
 8000768:	2107      	movs	r1, #7
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f8c8 	bl	8000900 <LoRa_write>
	HAL_Delay(5);
 8000770:	2005      	movs	r0, #5
 8000772:	f000 fe95 	bl	80014a0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800077a:	7afb      	ldrb	r3, [r7, #11]
 800077c:	461a      	mov	r2, r3
 800077e:	2108      	movs	r1, #8
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f8bd 	bl	8000900 <LoRa_write>
	HAL_Delay(5);
 8000786:	2005      	movs	r0, #5
 8000788:	f000 fe8a 	bl	80014a0 <HAL_Delay>
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b0c      	cmp	r3, #12
 80007a2:	dd01      	ble.n	80007a8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80007a4:	230c      	movs	r3, #12
 80007a6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	dc01      	bgt.n	80007b2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007b2:	211e      	movs	r1, #30
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f888 	bl	80008ca <LoRa_read>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 fe6e 	bl	80014a0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4413      	add	r3, r2
 80007d6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007d8:	7bbb      	ldrb	r3, [r7, #14]
 80007da:	461a      	mov	r2, r3
 80007dc:	211e      	movs	r1, #30
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f000 f88e 	bl	8000900 <LoRa_write>
	HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fe5b 	bl	80014a0 <HAL_Delay>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	460b      	mov	r3, r1
 80007fc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	461a      	mov	r2, r3
 8000802:	2109      	movs	r1, #9
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f87b 	bl	8000900 <LoRa_write>
	HAL_Delay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f000 fe48 	bl	80014a0 <HAL_Delay>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	2b2c      	cmp	r3, #44	; 0x2c
 800082c:	d801      	bhi.n	8000832 <LoRa_setOCP+0x1a>
		current = 45;
 800082e:	232d      	movs	r3, #45	; 0x2d
 8000830:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	2bf0      	cmp	r3, #240	; 0xf0
 8000836:	d901      	bls.n	800083c <LoRa_setOCP+0x24>
		current = 240;
 8000838:	23f0      	movs	r3, #240	; 0xf0
 800083a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b78      	cmp	r3, #120	; 0x78
 8000840:	d809      	bhi.n	8000856 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	3b2d      	subs	r3, #45	; 0x2d
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <LoRa_setOCP+0x78>)
 8000848:	fb82 1203 	smull	r1, r2, r2, r3
 800084c:	1052      	asrs	r2, r2, #1
 800084e:	17db      	asrs	r3, r3, #31
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e00b      	b.n	800086e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	2bf0      	cmp	r3, #240	; 0xf0
 800085a:	d808      	bhi.n	800086e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	331e      	adds	r3, #30
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <LoRa_setOCP+0x78>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1092      	asrs	r2, r2, #2
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	3320      	adds	r3, #32
 8000872:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	461a      	mov	r2, r3
 8000878:	210b      	movs	r1, #11
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f840 	bl	8000900 <LoRa_write>
	HAL_Delay(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f000 fe0d 	bl	80014a0 <HAL_Delay>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	66666667 	.word	0x66666667

08000894 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800089c:	211e      	movs	r1, #30
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f813 	bl	80008ca <LoRa_read>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f043 0307 	orr.w	r3, r3, #7
 80008ae:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	461a      	mov	r2, r3
 80008b4:	211e      	movs	r1, #30
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f822 	bl	8000900 <LoRa_write>
	HAL_Delay(10);
 80008bc:	200a      	movs	r0, #10
 80008be:	f000 fdef 	bl	80014a0 <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af02      	add	r7, sp, #8
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	460b      	mov	r3, r1
 80008d4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008e0:	f107 020f 	add.w	r2, r7, #15
 80008e4:	f107 010e 	add.w	r1, r7, #14
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	2201      	movs	r2, #1
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff fe91 	bl	8000618 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]
 800090c:	4613      	mov	r3, r2
 800090e:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000916:	b2db      	uxtb	r3, r3
 8000918:	73bb      	strb	r3, [r7, #14]
	data = value;
 800091a:	78bb      	ldrb	r3, [r7, #2]
 800091c:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800091e:	f107 020f 	add.w	r2, r7, #15
 8000922:	f107 010e 	add.w	r1, r7, #14
 8000926:	2301      	movs	r3, #1
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	4613      	mov	r3, r2
 800092c:	2201      	movs	r2, #1
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fec2 	bl	80006b8 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

	return 1;
 8000944:	2301      	movs	r3, #1
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <LoRa_WakeUp_Receive>:
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
}
/*
 * Lorayı receive mode için uyandır
 */
void LoRa_WakeUp_Receive(LoRa* _LoRa){
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800095a:	2105      	movs	r1, #5
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fdfa 	bl	8000556 <LoRa_gotoMode>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LoRa_Sleep>:
/*
 * Lorayı uyut
 */
void LoRa_Sleep(LoRa* _LoRa){
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000972:	2100      	movs	r1, #0
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fdee 	bl	8000556 <LoRa_gotoMode>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <LoRa_Delay>:
void LoRa_Delay(uint64_t x){
 8000982:	b490      	push	{r4, r7}
 8000984:	b088      	sub	sp, #32
 8000986:	af00      	add	r7, sp, #0
 8000988:	e9c7 0100 	strd	r0, r1, [r7]
	for(uint64_t k=0; k<x/2; k++);
 800098c:	f04f 0300 	mov.w	r3, #0
 8000990:	f04f 0400 	mov.w	r4, #0
 8000994:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000998:	e006      	b.n	80009a8 <LoRa_Delay+0x26>
 800099a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800099e:	1c59      	adds	r1, r3, #1
 80009a0:	f144 0200 	adc.w	r2, r4, #0
 80009a4:	e9c7 1206 	strd	r1, r2, [r7, #24]
 80009a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80009ac:	0864      	lsrs	r4, r4, #1
 80009ae:	ea4f 0333 	mov.w	r3, r3, rrx
 80009b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80009b6:	42a2      	cmp	r2, r4
 80009b8:	bf08      	it	eq
 80009ba:	4299      	cmpeq	r1, r3
 80009bc:	d3ed      	bcc.n	800099a <LoRa_Delay+0x18>
	for(uint64_t l=0; l<x/2; l++);
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	f04f 0400 	mov.w	r4, #0
 80009c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80009ca:	e006      	b.n	80009da <LoRa_Delay+0x58>
 80009cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009d0:	1c59      	adds	r1, r3, #1
 80009d2:	f144 0200 	adc.w	r2, r4, #0
 80009d6:	e9c7 1204 	strd	r1, r2, [r7, #16]
 80009da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80009de:	0864      	lsrs	r4, r4, #1
 80009e0:	ea4f 0333 	mov.w	r3, r3, rrx
 80009e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80009e8:	42a2      	cmp	r2, r4
 80009ea:	bf08      	it	eq
 80009ec:	4299      	cmpeq	r1, r3
 80009ee:	d3ed      	bcc.n	80009cc <LoRa_Delay+0x4a>
	for(uint64_t m=0; m<x/2; m++);
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	f04f 0400 	mov.w	r4, #0
 80009f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80009fc:	e006      	b.n	8000a0c <LoRa_Delay+0x8a>
 80009fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000a02:	1c59      	adds	r1, r3, #1
 8000a04:	f144 0200 	adc.w	r2, r4, #0
 8000a08:	e9c7 1202 	strd	r1, r2, [r7, #8]
 8000a0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000a10:	0864      	lsrs	r4, r4, #1
 8000a12:	ea4f 0333 	mov.w	r3, r3, rrx
 8000a16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000a1a:	42a2      	cmp	r2, r4
 8000a1c:	bf08      	it	eq
 8000a1e:	4299      	cmpeq	r1, r3
 8000a20:	d3ed      	bcc.n	80009fe <LoRa_Delay+0x7c>


}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc90      	pop	{r4, r7}
 8000a2a:	4770      	bx	lr

08000a2c <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min;

	for(int i=0; i<length; i++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e007      	b.n	8000a50 <LoRa_receive+0x24>
		data[i]=0;
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4413      	add	r3, r2
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf3      	blt.n	8000a40 <LoRa_receive+0x14>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a58:	2101      	movs	r1, #1
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff fd7b 	bl	8000556 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000a60:	2112      	movs	r1, #18
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff ff31 	bl	80008ca <LoRa_read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	75fb      	strb	r3, [r7, #23]
	if((read & 0x40) != 0){
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d02f      	beq.n	8000ad6 <LoRa_receive+0xaa>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	2112      	movs	r1, #18
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f7ff ff40 	bl	8000900 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000a80:	2113      	movs	r1, #19
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff ff21 	bl	80008ca <LoRa_read>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	75bb      	strb	r3, [r7, #22]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff ff1b 	bl	80008ca <LoRa_read>
 8000a94:	4603      	mov	r3, r0
 8000a96:	75fb      	strb	r3, [r7, #23]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	210d      	movs	r1, #13
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ff2e 	bl	8000900 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000aa4:	7dba      	ldrb	r2, [r7, #22]
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	bf28      	it	cs
 8000aac:	4613      	movcs	r3, r2
 8000aae:	757b      	strb	r3, [r7, #21]
		for(int i=0; i<min; i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	e00b      	b.n	8000ace <LoRa_receive+0xa2>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	18d4      	adds	r4, r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff03 	bl	80008ca <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	3301      	adds	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
 8000ace:	7d7b      	ldrb	r3, [r7, #21]
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbef      	blt.n	8000ab6 <LoRa_receive+0x8a>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ad6:	2105      	movs	r1, #5
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fd3c 	bl	8000556 <LoRa_gotoMode>
}
 8000ade:	bf00      	nop
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}

08000ae6 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ff24 	bl	800093c <LoRa_isvalid>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8093 	beq.w	8000c22 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000afc:	2100      	movs	r1, #0
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fd29 	bl	8000556 <LoRa_gotoMode>
			HAL_Delay(10);
 8000b04:	200a      	movs	r0, #10
 8000b06:	f000 fccb 	bl	80014a0 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fedc 	bl	80008ca <LoRa_read>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b16:	200a      	movs	r0, #10
 8000b18:	f000 fcc2 	bl	80014a0 <HAL_Delay>
			data = read | 0x80;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b22:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	461a      	mov	r2, r3
 8000b28:	2101      	movs	r1, #1
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fee8 	bl	8000900 <LoRa_write>
			HAL_Delay(100);
 8000b30:	2064      	movs	r0, #100	; 0x64
 8000b32:	f000 fcb5 	bl	80014a0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fdf9 	bl	8000734 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000b48:	4619      	mov	r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fe51 	bl	80007f2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff fe5d 	bl	8000818 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000b5e:	2223      	movs	r2, #35	; 0x23
 8000b60:	210c      	movs	r1, #12
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fecc 	bl	8000900 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff fe93 	bl	8000894 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fe0c 	bl	8000794 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	211f      	movs	r1, #31
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff febd 	bl	8000900 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	211d      	movs	r1, #29
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fea9 	bl	8000900 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2120      	movs	r1, #32
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fe9f 	bl	8000900 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2121      	movs	r1, #33	; 0x21
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fe97 	bl	8000900 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fe78 	bl	80008ca <LoRa_read>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000be4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000be6:	7bbb      	ldrb	r3, [r7, #14]
 8000be8:	461a      	mov	r2, r3
 8000bea:	2140      	movs	r1, #64	; 0x40
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff fe87 	bl	8000900 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fcae 	bl	8000556 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c00:	200a      	movs	r0, #10
 8000c02:	f000 fc4d 	bl	80014a0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c06:	2142      	movs	r1, #66	; 0x42
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fe5e 	bl	80008ca <LoRa_read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b12      	cmp	r3, #18
 8000c16:	d101      	bne.n	8000c1c <LoRa_init+0x136>
				return LORA_OK;
 8000c18:	23c8      	movs	r3, #200	; 0xc8
 8000c1a:	e004      	b.n	8000c26 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c1c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c20:	e001      	b.n	8000c26 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c22:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fbc1 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f88b 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f000 f975 	bl	8000f2c <MX_GPIO_Init>
  MX_SPI3_Init();
 8000c42:	f000 f8f1 	bl	8000e28 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c46:	f000 f925 	bl	8000e94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	myLoRa = newLoRa();
 8000c4a:	4c3c      	ldr	r4, [pc, #240]	; (8000d3c <main+0x10c>)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc3a 	bl	80004c8 <newLoRa>
 8000c54:	4625      	mov	r5, r4
 8000c56:	463c      	mov	r4, r7
 8000c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c60:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c64:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	myLoRa.CS_port = GPIOE;
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <main+0x10c>)
 8000c6a:	4a35      	ldr	r2, [pc, #212]	; (8000d40 <main+0x110>)
 8000c6c:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = GPIO_PIN_15;
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <main+0x10c>)
 8000c70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c74:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOE;
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <main+0x10c>)
 8000c78:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <main+0x110>)
 8000c7a:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = GPIO_PIN_14;
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <main+0x10c>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c82:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = GPIOE;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <main+0x10c>)
 8000c86:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <main+0x110>)
 8000c88:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = GPIO_PIN_13;
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <main+0x10c>)
 8000c8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c90:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi3;
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <main+0x10c>)
 8000c94:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <main+0x114>)
 8000c96:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 868;             // default = 433 MHz
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <main+0x10c>)
 8000c9a:	f44f 7259 	mov.w	r2, #868	; 0x364
 8000c9e:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;            // default = SF_7
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <main+0x10c>)
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <main+0x10c>)
 8000caa:	2207      	movs	r2, #7
 8000cac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;          // default = CR_4_5
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <main+0x10c>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <main+0x10c>)
 8000cba:	22ff      	movs	r2, #255	; 0xff
 8000cbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <main+0x10c>)
 8000cc2:	2264      	movs	r2, #100	; 0x64
 8000cc4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 8;              // default = 8;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <main+0x10c>)
 8000cca:	2208      	movs	r2, #8
 8000ccc:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <main+0x10c>)
 8000cd0:	f7ff fc23 	bl	800051a <LoRa_reset>
	LoRa_init(&myLoRa);
 8000cd4:	4819      	ldr	r0, [pc, #100]	; (8000d3c <main+0x10c>)
 8000cd6:	f7ff ff06 	bl	8000ae6 <LoRa_init>
	LoRa_WakeUp_Receive(&myLoRa);
 8000cda:	4818      	ldr	r0, [pc, #96]	; (8000d3c <main+0x10c>)
 8000cdc:	f7ff fe39 	bl	8000952 <LoRa_WakeUp_Receive>
	myID1[0] = 19;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <main+0x118>)
 8000ce2:	2213      	movs	r2, #19
 8000ce4:	701a      	strb	r2, [r3, #0]
	myID1[1] = 07;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <main+0x118>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	705a      	strb	r2, [r3, #1]
	myID1[2] = 49;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <main+0x118>)
 8000cee:	2231      	movs	r2, #49	; 0x31
 8000cf0:	709a      	strb	r2, [r3, #2]
	myID1[3] = 53;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <main+0x118>)
 8000cf4:	2235      	movs	r2, #53	; 0x35
 8000cf6:	70da      	strb	r2, [r3, #3]
	myID1[4] = 54;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <main+0x118>)
 8000cfa:	2236      	movs	r2, #54	; 0x36
 8000cfc:	711a      	strb	r2, [r3, #4]
	myID1[5] = 58;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <main+0x118>)
 8000d00:	223a      	movs	r2, #58	; 0x3a
 8000d02:	715a      	strb	r2, [r3, #5]
	myID1[6] = 49;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <main+0x118>)
 8000d06:	2231      	movs	r2, #49	; 0x31
 8000d08:	719a      	strb	r2, [r3, #6]
	myID2[0] = 19;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <main+0x11c>)
 8000d0c:	2213      	movs	r2, #19
 8000d0e:	701a      	strb	r2, [r3, #0]
	myID2[1] = 07;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <main+0x11c>)
 8000d12:	2207      	movs	r2, #7
 8000d14:	705a      	strb	r2, [r3, #1]
	myID2[2] = 32;
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <main+0x11c>)
 8000d18:	2220      	movs	r2, #32
 8000d1a:	709a      	strb	r2, [r3, #2]
	myID2[3] = 55;
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <main+0x11c>)
 8000d1e:	2237      	movs	r2, #55	; 0x37
 8000d20:	70da      	strb	r2, [r3, #3]
	myID2[4] = 52;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <main+0x11c>)
 8000d24:	2234      	movs	r2, #52	; 0x34
 8000d26:	711a      	strb	r2, [r3, #4]
	myID2[5] = 58;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <main+0x11c>)
 8000d2a:	223a      	movs	r2, #58	; 0x3a
 8000d2c:	715a      	strb	r2, [r3, #5]
	myID2[6] = 49;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <main+0x11c>)
 8000d30:	2231      	movs	r2, #49	; 0x31
 8000d32:	719a      	strb	r2, [r3, #6]

	HAL_TIM_Base_Start_IT(&htim2);
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <main+0x120>)
 8000d36:	f002 f856 	bl	8002de6 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d3a:	e7fe      	b.n	8000d3a <main+0x10a>
 8000d3c:	200000e4 	.word	0x200000e4
 8000d40:	40021000 	.word	0x40021000
 8000d44:	20000040 	.word	0x20000040
 8000d48:	20000038 	.word	0x20000038
 8000d4c:	20000030 	.word	0x20000030
 8000d50:	200000a4 	.word	0x200000a4

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	; 0x50
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	2230      	movs	r2, #48	; 0x30
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 fc38 	bl	80035d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fe48 	bl	8001a70 <HAL_RCC_OscConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000de6:	f000 f9db 	bl	80011a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000df6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2105      	movs	r1, #5
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f8a1 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e14:	f000 f9c4 	bl	80011a0 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	; 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <MX_SPI3_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_SPI3_Init+0x64>)
 8000e7a:	f001 fa27 	bl	80022cc <HAL_SPI_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000e84:	f000 f98c 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000040 	.word	0x20000040
 8000e90:	40003c00 	.word	0x40003c00

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eba:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000ebe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ec8:	22fa      	movs	r2, #250	; 0xfa
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000eda:	f001 ff59 	bl	8002d90 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 f95c 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000ef6:	f002 f8a2 	bl	800303e <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f94e 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM2_Init+0x94>)
 8000f12:	f002 faad 	bl	8003470 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 f940 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000a4 	.word	0x200000a4

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b39      	ldr	r3, [pc, #228]	; (800102c <MX_GPIO_Init+0x100>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a38      	ldr	r2, [pc, #224]	; (800102c <MX_GPIO_Init+0x100>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <MX_GPIO_Init+0x100>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <MX_GPIO_Init+0x100>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a31      	ldr	r2, [pc, #196]	; (800102c <MX_GPIO_Init+0x100>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <MX_GPIO_Init+0x100>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MX_GPIO_Init+0x100>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <MX_GPIO_Init+0x100>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <MX_GPIO_Init+0x100>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_GPIO_Init+0x100>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <MX_GPIO_Init+0x100>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_GPIO_Init+0x100>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_GPIO_Init+0x100>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <MX_GPIO_Init+0x100>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_GPIO_Init+0x100>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14|SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <MX_GPIO_Init+0x104>)
 8000fd6:	f000 fd31 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_3_Pin|led_2_Pin|led_1_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_GPIO_Init+0x108>)
 8000fe2:	f000 fd2b 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE14 SPI3_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|SPI3_CS_Pin;
 8000fe6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_GPIO_Init+0x104>)
 8001000:	f000 fb82 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_3_Pin led_2_Pin led_1_Pin */
  GPIO_InitStruct.Pin = led_3_Pin|led_2_Pin|led_1_Pin;
 8001004:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0x108>)
 800101e:	f000 fb73 	bl	8001708 <HAL_GPIO_Init>

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40021000 	.word	0x40021000
 8001034:	40020c00 	.word	0x40020c00

08001038 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	counterID1 = 0;
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	counterID2 = 0;
 8001046:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
	uint8_t temp = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	75fb      	strb	r3, [r7, #23]

	for (int m = 0; m < 7; m++) {
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	e007      	b.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x2e>
		read_data[m] = 0;
 8001056:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4413      	add	r3, r2
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	for (int m = 0; m < 7; m++) {
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b06      	cmp	r3, #6
 800106a:	ddf4      	ble.n	8001056 <HAL_TIM_PeriodElapsedCallback+0x1e>
	}

	LoRa_WakeUp_Receive(&myLoRa);
 800106c:	4846      	ldr	r0, [pc, #280]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800106e:	f7ff fc70 	bl	8000952 <LoRa_WakeUp_Receive>
	LoRa_Delay(999999);
 8001072:	4846      	ldr	r0, [pc, #280]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001074:	f04f 0100 	mov.w	r1, #0
 8001078:	f7ff fc83 	bl	8000982 <LoRa_Delay>

	do {
		LoRa_receive(&myLoRa, read_data, 10);              //128
 800107c:	220a      	movs	r2, #10
 800107e:	4941      	ldr	r1, [pc, #260]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001080:	4841      	ldr	r0, [pc, #260]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001082:	f7ff fcd3 	bl	8000a2c <LoRa_receive>

		temp++;
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	3301      	adds	r3, #1
 800108a:	75fb      	strb	r3, [r7, #23]

	} while (!(((read_data[0] == 19) && (read_data[1] == 07)) || (temp > 7)));
 800108c:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b13      	cmp	r3, #19
 8001092:	d103      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0x64>
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d002      	beq.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d9ec      	bls.n	800107c <HAL_TIM_PeriodElapsedCallback+0x44>

	if((read_data[0] == 19) && (read_data[1] == 07)){
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b13      	cmp	r3, #19
 80010a8:	d109      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x86>
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d105      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x86>
		trueRate++;
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010bc:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	}

	for (int m = 2; m < 7; m++) {
 80010be:	2302      	movs	r3, #2
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e022      	b.n	800110a <HAL_TIM_PeriodElapsedCallback+0xd2>
		if (read_data[m] == myID1[m]) {
 80010c4:	4a2f      	ldr	r2, [pc, #188]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	4931      	ldr	r1, [pc, #196]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	440b      	add	r3, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d105      	bne.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0xac>
			counterID1++;
 80010d8:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80010e2:	701a      	strb	r2, [r3, #0]
		}
		if (read_data[m] == myID2[m]) {
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	492a      	ldr	r1, [pc, #168]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	440b      	add	r3, r1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d105      	bne.n	8001104 <HAL_TIM_PeriodElapsedCallback+0xcc>
			counterID2++;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001102:	701a      	strb	r2, [r3, #0]
	for (int m = 2; m < 7; m++) {
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b06      	cmp	r3, #6
 800110e:	ddd9      	ble.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
		}

	}
	if (counterID1 == 5) {
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d10c      	bne.n	8001132 <HAL_TIM_PeriodElapsedCallback+0xfa>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111e:	481f      	ldr	r0, [pc, #124]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001120:	f000 fc8c 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800112a:	481c      	ldr	r0, [pc, #112]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800112c:	f000 fc86 	bl	8001a3c <HAL_GPIO_WritePin>
 8001130:	e01c      	b.n	800116c <HAL_TIM_PeriodElapsedCallback+0x134>

	} else if (counterID2 == 5) {
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b05      	cmp	r3, #5
 8001138:	d10c      	bne.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x11c>

		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001140:	4816      	ldr	r0, [pc, #88]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001142:	f000 fc7b 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800114e:	f000 fc75 	bl	8001a3c <HAL_GPIO_WritePin>
 8001152:	e00b      	b.n	800116c <HAL_TIM_PeriodElapsedCallback+0x134>
	}
	else {
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800115c:	f000 fc6e 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001168:	f000 fc68 	bl	8001a3c <HAL_GPIO_WritePin>
	}
	LoRa_Sleep(&myLoRa);
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800116e:	f7ff fbfc 	bl	800096a <LoRa_Sleep>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000a2 	.word	0x200000a2
 8001180:	20000110 	.word	0x20000110
 8001184:	20000098 	.word	0x20000098
 8001188:	200000e4 	.word	0x200000e4
 800118c:	000f423f 	.word	0x000f423f
 8001190:	20000028 	.word	0x20000028
 8001194:	20000038 	.word	0x20000038
 8001198:	20000030 	.word	0x20000030
 800119c:	40020c00 	.word	0x40020c00

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011a6:	e7fe      	b.n	80011a6 <Error_Handler+0x6>

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 fa4c 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_SPI_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12c      	bne.n	8001274 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_SPI_MspInit+0x88>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_SPI_MspInit+0x88>)
 8001224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_SPI_MspInit+0x88>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_SPI_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_SPI_MspInit+0x88>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_SPI_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001252:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001264:	2306      	movs	r3, #6
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_SPI_MspInit+0x8c>)
 8001270:	f000 fa4a 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40003c00 	.word	0x40003c00
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d115      	bne.n	80012c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0x48>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_TIM_Base_MspInit+0x48>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_TIM_Base_MspInit+0x48>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f000 f9ed 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012c0:	201c      	movs	r0, #28
 80012c2:	f000 fa06 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 f89e 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <TIM2_IRQHandler+0x10>)
 800132e:	f001 fd7e 	bl	8002e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000a4 	.word	0x200000a4

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SystemInit+0x28>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <SystemInit+0x28>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SystemInit+0x28>)
 8001352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001356:	609a      	str	r2, [r3, #8]
#endif
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800136c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800136e:	e003      	b.n	8001378 <LoopCopyDataInit>

08001370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001376:	3104      	adds	r1, #4

08001378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800137c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001380:	d3f6      	bcc.n	8001370 <CopyDataInit>
  ldr  r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001384:	e002      	b.n	800138c <LoopFillZerobss>

08001386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001388:	f842 3b04 	str.w	r3, [r2], #4

0800138c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800138e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001390:	d3f9      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001392:	f7ff ffd3 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f002 f8fb 	bl	8003590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff fc49 	bl	8000c30 <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013a4:	08003620 	.word	0x08003620
  ldr  r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013ac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013b0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013b4:	20000118 	.word	0x20000118

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_Init+0x40>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_Init+0x40>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x40>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f94d 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff feda 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f965 	bl	80016ee <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f92d 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	20000114 	.word	0x20000114

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000114 	.word	0x20000114

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_Delay+0x40>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e16b      	b.n	80019fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 815a 	bne.w	80019f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d00b      	beq.n	8001762 <HAL_GPIO_Init+0x5a>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001756:	2b11      	cmp	r3, #17
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b12      	cmp	r3, #18
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0xfc>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b12      	cmp	r3, #18
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80b4 	beq.w	80019f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <HAL_GPIO_Init+0x308>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <HAL_GPIO_Init+0x308>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <HAL_GPIO_Init+0x308>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018aa:	4a5a      	ldr	r2, [pc, #360]	; (8001a14 <HAL_GPIO_Init+0x30c>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_GPIO_Init+0x310>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x226>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a50      	ldr	r2, [pc, #320]	; (8001a1c <HAL_GPIO_Init+0x314>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x222>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_GPIO_Init+0x318>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x21e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <HAL_GPIO_Init+0x31c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x21a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <HAL_GPIO_Init+0x320>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x216>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x324>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x212>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_GPIO_Init+0x328>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_GPIO_Init+0x32c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x20a>
 800190e:	2307      	movs	r3, #7
 8001910:	e00e      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001912:	2308      	movs	r3, #8
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001916:	2306      	movs	r3, #6
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4934      	ldr	r1, [pc, #208]	; (8001a14 <HAL_GPIO_Init+0x30c>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_GPIO_Init+0x330>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001972:	4a31      	ldr	r2, [pc, #196]	; (8001a38 <HAL_GPIO_Init+0x330>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x330>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x330>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_GPIO_Init+0x330>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae90 	bls.w	8001724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	3724      	adds	r7, #36	; 0x24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40021800 	.word	0x40021800
 8001a34:	40021c00 	.word	0x40021c00
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e25b      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d075      	beq.n	8001b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8e:	4ba3      	ldr	r3, [pc, #652]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d00c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9a:	4ba0      	ldr	r3, [pc, #640]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d112      	bne.n	8001acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4b9d      	ldr	r3, [pc, #628]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab2:	d10b      	bne.n	8001acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	4b99      	ldr	r3, [pc, #612]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d05b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x108>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d157      	bne.n	8001b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e236      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x74>
 8001ad6:	4b91      	ldr	r3, [pc, #580]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a90      	ldr	r2, [pc, #576]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0xb0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x98>
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a8a      	ldr	r2, [pc, #552]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0xb0>
 8001b08:	4b84      	ldr	r3, [pc, #528]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a83      	ldr	r2, [pc, #524]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a80      	ldr	r2, [pc, #512]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fcae 	bl	8001488 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fcaa 	bl	8001488 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1fb      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0xc0>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fc9a 	bl	8001488 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fc96 	bl	8001488 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1e7      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	4b6c      	ldr	r3, [pc, #432]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0xe8>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d063      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	4b65      	ldr	r3, [pc, #404]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b92:	4b62      	ldr	r3, [pc, #392]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d11c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d116      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	4b5c      	ldr	r3, [pc, #368]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x152>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e1bb      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4952      	ldr	r1, [pc, #328]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	e03a      	b.n	8001c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be0:	4b4f      	ldr	r3, [pc, #316]	; (8001d20 <HAL_RCC_OscConfig+0x2b0>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff fc4f 	bl	8001488 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fc4b 	bl	8001488 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e19c      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4940      	ldr	r1, [pc, #256]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_OscConfig+0x2b0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc2e 	bl	8001488 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc2a 	bl	8001488 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e17b      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d030      	beq.n	8001cbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d016      	beq.n	8001c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x2b4>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff fc0e 	bl	8001488 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fc0a 	bl	8001488 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e15b      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x200>
 8001c8e:	e015      	b.n	8001cbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_OscConfig+0x2b4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fbf7 	bl	8001488 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fbf3 	bl	8001488 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e144      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80a0 	beq.w	8001e0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10f      	bne.n	8001cfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x2b8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d121      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCC_OscConfig+0x2b8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_RCC_OscConfig+0x2b8>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fbb9 	bl	8001488 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	e011      	b.n	8001d3e <HAL_RCC_OscConfig+0x2ce>
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	42470000 	.word	0x42470000
 8001d24:	42470e80 	.word	0x42470e80
 8001d28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2c:	f7ff fbac 	bl	8001488 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0fd      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x4d4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d106      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
 8001d52:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	4a7c      	ldr	r2, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5e:	e01c      	b.n	8001d9a <HAL_RCC_OscConfig+0x32a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b77      	ldr	r3, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a76      	ldr	r2, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b74      	ldr	r3, [pc, #464]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a73      	ldr	r2, [pc, #460]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d80:	e00b      	b.n	8001d9a <HAL_RCC_OscConfig+0x32a>
 8001d82:	4b71      	ldr	r3, [pc, #452]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a70      	ldr	r2, [pc, #448]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a6d      	ldr	r2, [pc, #436]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d015      	beq.n	8001dce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff fb71 	bl	8001488 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da8:	e00a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7ff fb6d 	bl	8001488 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0bc      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ee      	beq.n	8001daa <HAL_RCC_OscConfig+0x33a>
 8001dcc:	e014      	b.n	8001df8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fb5b 	bl	8001488 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fb57 	bl	8001488 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0a6      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ee      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d105      	bne.n	8001e0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfe:	4b52      	ldr	r3, [pc, #328]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8092 	beq.w	8001f38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d05c      	beq.n	8001eda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d141      	bne.n	8001eac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_RCC_OscConfig+0x4dc>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2e:	f7ff fb2b 	bl	8001488 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e36:	f7ff fb27 	bl	8001488 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e078      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e48:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	019b      	lsls	r3, r3, #6
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	061b      	lsls	r3, r3, #24
 8001e78:	4933      	ldr	r1, [pc, #204]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_OscConfig+0x4dc>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fb00 	bl	8001488 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff fafc 	bl	8001488 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e04d      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x41c>
 8001eaa:	e045      	b.n	8001f38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x4dc>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fae9 	bl	8001488 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7ff fae5 	bl	8001488 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e036      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x44a>
 8001ed8:	e02e      	b.n	8001f38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e029      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_RCC_OscConfig+0x4d8>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d115      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470060 	.word	0x42470060

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0cc      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 030f 	and.w	r3, r3, #15
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d90c      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b65      	ldr	r3, [pc, #404]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b8      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa4:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b50      	ldr	r3, [pc, #320]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	494d      	ldr	r1, [pc, #308]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d044      	beq.n	8002070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d119      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e07f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d003      	beq.n	800200e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200a:	2b03      	cmp	r3, #3
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e067      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 0203 	bic.w	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4934      	ldr	r1, [pc, #208]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff fa22 	bl	8001488 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	e00a      	b.n	800205e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002048:	f7ff fa1e 	bl	8001488 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04f      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 020c 	and.w	r2, r3, #12
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d1eb      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20c      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e032      	b.n	80020fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4916      	ldr	r1, [pc, #88]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d6:	f000 f821 	bl	800211c <HAL_RCC_GetSysClockFreq>
 80020da:	4601      	mov	r1, r0
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	fa21 f303 	lsr.w	r3, r1, r3
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f982 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00
 800210c:	40023800 	.word	0x40023800
 8002110:	08003600 	.word	0x08003600
 8002114:	20000000 	.word	0x20000000
 8002118:	20000004 	.word	0x20000004

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d007      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x32>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d008      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x38>
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 80b4 	bne.w	80022b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002148:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800214a:	60bb      	str	r3, [r7, #8]
       break;
 800214c:	e0b3      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800214e:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002150:	60bb      	str	r3, [r7, #8]
      break;
 8002152:	e0b0      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002154:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800215c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800215e:	4b58      	ldr	r3, [pc, #352]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04a      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216a:	4b55      	ldr	r3, [pc, #340]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	099b      	lsrs	r3, r3, #6
 8002170:	f04f 0400 	mov.w	r4, #0
 8002174:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	ea03 0501 	and.w	r5, r3, r1
 8002180:	ea04 0602 	and.w	r6, r4, r2
 8002184:	4629      	mov	r1, r5
 8002186:	4632      	mov	r2, r6
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	0154      	lsls	r4, r2, #5
 8002192:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	4619      	mov	r1, r3
 800219a:	4622      	mov	r2, r4
 800219c:	1b49      	subs	r1, r1, r5
 800219e:	eb62 0206 	sbc.w	r2, r2, r6
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f04f 0400 	mov.w	r4, #0
 80021aa:	0194      	lsls	r4, r2, #6
 80021ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021b0:	018b      	lsls	r3, r1, #6
 80021b2:	1a5b      	subs	r3, r3, r1
 80021b4:	eb64 0402 	sbc.w	r4, r4, r2
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	00e2      	lsls	r2, r4, #3
 80021c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021c6:	00d9      	lsls	r1, r3, #3
 80021c8:	460b      	mov	r3, r1
 80021ca:	4614      	mov	r4, r2
 80021cc:	195b      	adds	r3, r3, r5
 80021ce:	eb44 0406 	adc.w	r4, r4, r6
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	0262      	lsls	r2, r4, #9
 80021dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021e0:	0259      	lsls	r1, r3, #9
 80021e2:	460b      	mov	r3, r1
 80021e4:	4614      	mov	r4, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	4621      	mov	r1, r4
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f04f 0400 	mov.w	r4, #0
 80021f0:	461a      	mov	r2, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	f7fd ffe8 	bl	80001c8 <__aeabi_uldivmod>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e049      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	f04f 0400 	mov.w	r4, #0
 800220a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	ea03 0501 	and.w	r5, r3, r1
 8002216:	ea04 0602 	and.w	r6, r4, r2
 800221a:	4629      	mov	r1, r5
 800221c:	4632      	mov	r2, r6
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	f04f 0400 	mov.w	r4, #0
 8002226:	0154      	lsls	r4, r2, #5
 8002228:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800222c:	014b      	lsls	r3, r1, #5
 800222e:	4619      	mov	r1, r3
 8002230:	4622      	mov	r2, r4
 8002232:	1b49      	subs	r1, r1, r5
 8002234:	eb62 0206 	sbc.w	r2, r2, r6
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	f04f 0400 	mov.w	r4, #0
 8002240:	0194      	lsls	r4, r2, #6
 8002242:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002246:	018b      	lsls	r3, r1, #6
 8002248:	1a5b      	subs	r3, r3, r1
 800224a:	eb64 0402 	sbc.w	r4, r4, r2
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	00e2      	lsls	r2, r4, #3
 8002258:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800225c:	00d9      	lsls	r1, r3, #3
 800225e:	460b      	mov	r3, r1
 8002260:	4614      	mov	r4, r2
 8002262:	195b      	adds	r3, r3, r5
 8002264:	eb44 0406 	adc.w	r4, r4, r6
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	02a2      	lsls	r2, r4, #10
 8002272:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002276:	0299      	lsls	r1, r3, #10
 8002278:	460b      	mov	r3, r1
 800227a:	4614      	mov	r4, r2
 800227c:	4618      	mov	r0, r3
 800227e:	4621      	mov	r1, r4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f04f 0400 	mov.w	r4, #0
 8002286:	461a      	mov	r2, r3
 8002288:	4623      	mov	r3, r4
 800228a:	f7fd ff9d 	bl	80001c8 <__aeabi_uldivmod>
 800228e:	4603      	mov	r3, r0
 8002290:	460c      	mov	r4, r1
 8002292:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	60bb      	str	r3, [r7, #8]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022b2:	60bb      	str	r3, [r7, #8]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	68bb      	ldr	r3, [r7, #8]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	007a1200 	.word	0x007a1200

080022cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e056      	b.n	800238c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d106      	bne.n	80022fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe ff7d 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002314:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	ea42 0103 	orr.w	r1, r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	f003 0104 	and.w	r1, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_SPI_Transmit+0x22>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e11e      	b.n	80025f4 <HAL_SPI_Transmit+0x260>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023be:	f7ff f863 	bl	8001488 <HAL_GetTick>
 80023c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d002      	beq.n	80023da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
 80023d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023d8:	e103      	b.n	80025e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_SPI_Transmit+0x52>
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023ea:	e0fa      	b.n	80025e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2203      	movs	r2, #3
 80023f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002432:	d107      	bne.n	8002444 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d007      	beq.n	8002462 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800246a:	d14b      	bne.n	8002504 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_SPI_Transmit+0xe6>
 8002474:	8afb      	ldrh	r3, [r7, #22]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d13e      	bne.n	80024f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	881a      	ldrh	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	1c9a      	adds	r2, r3, #2
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800249e:	e02b      	b.n	80024f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d112      	bne.n	80024d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80024d2:	e011      	b.n	80024f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024d4:	f7fe ffd8 	bl	8001488 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d803      	bhi.n	80024ec <HAL_SPI_Transmit+0x158>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d102      	bne.n	80024f2 <HAL_SPI_Transmit+0x15e>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024f6:	e074      	b.n	80025e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ce      	bne.n	80024a0 <HAL_SPI_Transmit+0x10c>
 8002502:	e04c      	b.n	800259e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_SPI_Transmit+0x17e>
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d140      	bne.n	8002594 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002538:	e02c      	b.n	8002594 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	d113      	bne.n	8002570 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	; 0x36
 800256e:	e011      	b.n	8002594 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002570:	f7fe ff8a 	bl	8001488 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d803      	bhi.n	8002588 <HAL_SPI_Transmit+0x1f4>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d102      	bne.n	800258e <HAL_SPI_Transmit+0x1fa>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002592:	e026      	b.n	80025e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1cd      	bne.n	800253a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	6839      	ldr	r1, [r7, #0]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fbb2 	bl	8002d0c <SPI_EndRxTxTransaction>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	77fb      	strb	r3, [r7, #31]
 80025de:	e000      	b.n	80025e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80025e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3720      	adds	r7, #32
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002618:	d112      	bne.n	8002640 <HAL_SPI_Receive+0x44>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10e      	bne.n	8002640 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2204      	movs	r2, #4
 8002626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f8e9 	bl	800280e <HAL_SPI_TransmitReceive>
 800263c:	4603      	mov	r3, r0
 800263e:	e0e2      	b.n	8002806 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_SPI_Receive+0x52>
 800264a:	2302      	movs	r3, #2
 800264c:	e0db      	b.n	8002806 <HAL_SPI_Receive+0x20a>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002656:	f7fe ff17 	bl	8001488 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d002      	beq.n	800266e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800266c:	e0c2      	b.n	80027f4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_SPI_Receive+0x7e>
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800267e:	e0b9      	b.n	80027f4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2204      	movs	r2, #4
 8002684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c6:	d107      	bne.n	80026d8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d007      	beq.n	80026f6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d162      	bne.n	80027c4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026fe:	e02e      	b.n	800275e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d115      	bne.n	800273a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f103 020c 	add.w	r2, r3, #12
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002738:	e011      	b.n	800275e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800273a:	f7fe fea5 	bl	8001488 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d803      	bhi.n	8002752 <HAL_SPI_Receive+0x156>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d102      	bne.n	8002758 <HAL_SPI_Receive+0x15c>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800275c:	e04a      	b.n	80027f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1cb      	bne.n	8002700 <HAL_SPI_Receive+0x104>
 8002768:	e031      	b.n	80027ce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d113      	bne.n	80027a0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	b292      	uxth	r2, r2
 8002784:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800279e:	e011      	b.n	80027c4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027a0:	f7fe fe72 	bl	8001488 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d803      	bhi.n	80027b8 <HAL_SPI_Receive+0x1bc>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d102      	bne.n	80027be <HAL_SPI_Receive+0x1c2>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027c2:	e017      	b.n	80027f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1cd      	bne.n	800276a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	6839      	ldr	r1, [r7, #0]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fa35 	bl	8002c42 <SPI_EndRxTransaction>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	75fb      	strb	r3, [r7, #23]
 80027f0:	e000      	b.n	80027f4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80027f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002804:	7dfb      	ldrb	r3, [r7, #23]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b08c      	sub	sp, #48	; 0x30
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x26>
 8002830:	2302      	movs	r3, #2
 8002832:	e18a      	b.n	8002b4a <HAL_SPI_TransmitReceive+0x33c>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800283c:	f7fe fe24 	bl	8001488 <HAL_GetTick>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800285a:	2b01      	cmp	r3, #1
 800285c:	d00f      	beq.n	800287e <HAL_SPI_TransmitReceive+0x70>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002864:	d107      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <HAL_SPI_TransmitReceive+0x68>
 800286e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002872:	2b04      	cmp	r3, #4
 8002874:	d003      	beq.n	800287e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800287c:	e15b      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_SPI_TransmitReceive+0x82>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_SPI_TransmitReceive+0x82>
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002896:	e14e      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d003      	beq.n	80028ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2205      	movs	r2, #5
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	887a      	ldrh	r2, [r7, #2]
 80028c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	887a      	ldrh	r2, [r7, #2]
 80028ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d007      	beq.n	8002900 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002908:	d178      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_SPI_TransmitReceive+0x10a>
 8002912:	8b7b      	ldrh	r3, [r7, #26]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d166      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800293c:	e053      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11b      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x176>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_SPI_TransmitReceive+0x176>
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	2b01      	cmp	r3, #1
 800295a:	d113      	bne.n	8002984 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	881a      	ldrh	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	1c9a      	adds	r2, r3, #2
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d119      	bne.n	80029c6 <HAL_SPI_TransmitReceive+0x1b8>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d014      	beq.n	80029c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	b292      	uxth	r2, r2
 80029a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	1c9a      	adds	r2, r3, #2
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029c2:	2301      	movs	r3, #1
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029c6:	f7fe fd5f 	bl	8001488 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d807      	bhi.n	80029e6 <HAL_SPI_TransmitReceive+0x1d8>
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d003      	beq.n	80029e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029e4:	e0a7      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1a6      	bne.n	800293e <HAL_SPI_TransmitReceive+0x130>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1a1      	bne.n	800293e <HAL_SPI_TransmitReceive+0x130>
 80029fa:	e07c      	b.n	8002af6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x1fc>
 8002a04:	8b7b      	ldrh	r3, [r7, #26]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d16b      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a30:	e057      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d11c      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x26c>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d017      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x26c>
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d114      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	7812      	ldrb	r2, [r2, #0]
 8002a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d119      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x2ae>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d014      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002abc:	f7fe fce4 	bl	8001488 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d803      	bhi.n	8002ad4 <HAL_SPI_TransmitReceive+0x2c6>
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d102      	bne.n	8002ada <HAL_SPI_TransmitReceive+0x2cc>
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ae0:	e029      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1a2      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x224>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d19d      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f906 	bl	8002d0c <SPI_EndRxTxTransaction>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b12:	e010      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	e000      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3730      	adds	r7, #48	; 0x30
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b60:	b2db      	uxtb	r3, r3
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7e:	e04c      	b.n	8002c1a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d048      	beq.n	8002c1a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b88:	f7fe fc7e 	bl	8001488 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d902      	bls.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d13d      	bne.n	8002c1a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb6:	d111      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc0:	d004      	beq.n	8002bcc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bca:	d107      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be4:	d10f      	bne.n	8002c06 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e00f      	b.n	8002c3a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4013      	ands	r3, r2
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1a3      	bne.n	8002b80 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af02      	add	r7, sp, #8
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c56:	d111      	bne.n	8002c7c <SPI_EndRxTransaction+0x3a>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c60:	d004      	beq.n	8002c6c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d107      	bne.n	8002c7c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c84:	d12a      	bne.n	8002cdc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d012      	beq.n	8002cb6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f7ff ff67 	bl	8002b6e <SPI_WaitFlagStateUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d02d      	beq.n	8002d02 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e026      	b.n	8002d04 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff ff54 	bl	8002b6e <SPI_WaitFlagStateUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01a      	beq.n	8002d02 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e013      	b.n	8002d04 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff ff41 	bl	8002b6e <SPI_WaitFlagStateUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e000      	b.n	8002d04 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <SPI_EndRxTxTransaction+0x7c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <SPI_EndRxTxTransaction+0x80>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0d5b      	lsrs	r3, r3, #21
 8002d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d36:	d112      	bne.n	8002d5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff13 	bl	8002b6e <SPI_WaitFlagStateUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e00f      	b.n	8002d7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b80      	cmp	r3, #128	; 0x80
 8002d76:	d0f2      	beq.n	8002d5e <SPI_EndRxTxTransaction+0x52>
 8002d78:	e000      	b.n	8002d7c <SPI_EndRxTxTransaction+0x70>
        break;
 8002d7a:	bf00      	nop
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	165e9f81 	.word	0x165e9f81

08002d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e01d      	b.n	8002dde <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fa66 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fa14 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d122      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d11b      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0202 	mvn.w	r2, #2
 8002e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f9a5 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002e76:	e005      	b.n	8002e84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f997 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9a8 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d122      	bne.n	8002ede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d11b      	bne.n	8002ede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0204 	mvn.w	r2, #4
 8002eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f97b 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002eca:	e005      	b.n	8002ed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f96d 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f97e 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d122      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11b      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0208 	mvn.w	r2, #8
 8002f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f951 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002f1e:	e005      	b.n	8002f2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f943 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f954 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d122      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d11b      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0210 	mvn.w	r2, #16
 8002f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f927 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002f72:	e005      	b.n	8002f80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f919 	bl	80031ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f92a 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10e      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0201 	mvn.w	r2, #1
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe f843 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d10e      	bne.n	8002fde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d107      	bne.n	8002fde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 facf 	bl	800357c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d10e      	bne.n	800300a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d107      	bne.n	800300a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f8ef 	bl	80031e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d10e      	bne.n	8003036 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b20      	cmp	r3, #32
 8003024:	d107      	bne.n	8003036 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0220 	mvn.w	r2, #32
 800302e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa99 	bl	8003568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_ConfigClockSource+0x18>
 8003052:	2302      	movs	r3, #2
 8003054:	e0a6      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x166>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003074:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d067      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x120>
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d80b      	bhi.n	80030aa <HAL_TIM_ConfigClockSource+0x6c>
 8003092:	2b10      	cmp	r3, #16
 8003094:	d073      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x140>
 8003096:	2b10      	cmp	r3, #16
 8003098:	d802      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x62>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d06f      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800309e:	e078      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d06c      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x140>
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	d06a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030a8:	e073      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030aa:	2b70      	cmp	r3, #112	; 0x70
 80030ac:	d00d      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x8c>
 80030ae:	2b70      	cmp	r3, #112	; 0x70
 80030b0:	d804      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x7e>
 80030b2:	2b50      	cmp	r3, #80	; 0x50
 80030b4:	d033      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xe0>
 80030b6:	2b60      	cmp	r3, #96	; 0x60
 80030b8:	d041      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030ba:	e06a      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c0:	d066      	beq.n	8003190 <HAL_TIM_ConfigClockSource+0x152>
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c6:	d017      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030c8:	e063      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f000 f9a9 	bl	8003430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	609a      	str	r2, [r3, #8]
      break;
 80030f6:	e04c      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f000 f992 	bl	8003430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311a:	609a      	str	r2, [r3, #8]
      break;
 800311c:	e039      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	461a      	mov	r2, r3
 800312c:	f000 f906 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2150      	movs	r1, #80	; 0x50
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f95f 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 800313c:	e029      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	f000 f925 	bl	800339a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2160      	movs	r1, #96	; 0x60
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f94f 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 800315c:	e019      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	461a      	mov	r2, r3
 800316c:	f000 f8e6 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f93f 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 800317c:	e009      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	4610      	mov	r0, r2
 800318a:	f000 f936 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 800318e:	e000      	b.n	8003192 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a40      	ldr	r2, [pc, #256]	; (8003310 <TIM_Base_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d00f      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a3d      	ldr	r2, [pc, #244]	; (8003314 <TIM_Base_SetConfig+0x118>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3c      	ldr	r2, [pc, #240]	; (8003318 <TIM_Base_SetConfig+0x11c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <TIM_Base_SetConfig+0x120>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <TIM_Base_SetConfig+0x124>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2f      	ldr	r2, [pc, #188]	; (8003310 <TIM_Base_SetConfig+0x114>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02b      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d027      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <TIM_Base_SetConfig+0x118>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d023      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <TIM_Base_SetConfig+0x11c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2a      	ldr	r2, [pc, #168]	; (800331c <TIM_Base_SetConfig+0x120>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01b      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a29      	ldr	r2, [pc, #164]	; (8003320 <TIM_Base_SetConfig+0x124>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d017      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <TIM_Base_SetConfig+0x128>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <TIM_Base_SetConfig+0x12c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00f      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a26      	ldr	r2, [pc, #152]	; (800332c <TIM_Base_SetConfig+0x130>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <TIM_Base_SetConfig+0x134>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a24      	ldr	r2, [pc, #144]	; (8003334 <TIM_Base_SetConfig+0x138>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a23      	ldr	r2, [pc, #140]	; (8003338 <TIM_Base_SetConfig+0x13c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d108      	bne.n	80032c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <TIM_Base_SetConfig+0x114>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0xf8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <TIM_Base_SetConfig+0x124>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d103      	bne.n	80032fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	615a      	str	r2, [r3, #20]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010000 	.word	0x40010000
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40010400 	.word	0x40010400
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800
 8003330:	40001800 	.word	0x40001800
 8003334:	40001c00 	.word	0x40001c00
 8003338:	40002000 	.word	0x40002000

0800333c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 030a 	bic.w	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f023 0210 	bic.w	r2, r3, #16
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	f043 0307 	orr.w	r3, r3, #7
 800341c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800344a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	431a      	orrs	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e05a      	b.n	800353e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d4:	d01d      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10c      	bne.n	800352c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	40014000 	.word	0x40014000
 8003564:	40001800 	.word	0x40001800

08003568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <__libc_init_array>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4e0d      	ldr	r6, [pc, #52]	; (80035c8 <__libc_init_array+0x38>)
 8003594:	4c0d      	ldr	r4, [pc, #52]	; (80035cc <__libc_init_array+0x3c>)
 8003596:	1ba4      	subs	r4, r4, r6
 8003598:	10a4      	asrs	r4, r4, #2
 800359a:	2500      	movs	r5, #0
 800359c:	42a5      	cmp	r5, r4
 800359e:	d109      	bne.n	80035b4 <__libc_init_array+0x24>
 80035a0:	4e0b      	ldr	r6, [pc, #44]	; (80035d0 <__libc_init_array+0x40>)
 80035a2:	4c0c      	ldr	r4, [pc, #48]	; (80035d4 <__libc_init_array+0x44>)
 80035a4:	f000 f820 	bl	80035e8 <_init>
 80035a8:	1ba4      	subs	r4, r4, r6
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	2500      	movs	r5, #0
 80035ae:	42a5      	cmp	r5, r4
 80035b0:	d105      	bne.n	80035be <__libc_init_array+0x2e>
 80035b2:	bd70      	pop	{r4, r5, r6, pc}
 80035b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035b8:	4798      	blx	r3
 80035ba:	3501      	adds	r5, #1
 80035bc:	e7ee      	b.n	800359c <__libc_init_array+0xc>
 80035be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035c2:	4798      	blx	r3
 80035c4:	3501      	adds	r5, #1
 80035c6:	e7f2      	b.n	80035ae <__libc_init_array+0x1e>
 80035c8:	08003618 	.word	0x08003618
 80035cc:	08003618 	.word	0x08003618
 80035d0:	08003618 	.word	0x08003618
 80035d4:	0800361c 	.word	0x0800361c

080035d8 <memset>:
 80035d8:	4402      	add	r2, r0
 80035da:	4603      	mov	r3, r0
 80035dc:	4293      	cmp	r3, r2
 80035de:	d100      	bne.n	80035e2 <memset+0xa>
 80035e0:	4770      	bx	lr
 80035e2:	f803 1b01 	strb.w	r1, [r3], #1
 80035e6:	e7f9      	b.n	80035dc <memset+0x4>

080035e8 <_init>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr

080035f4 <_fini>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr
