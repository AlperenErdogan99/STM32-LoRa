
stm32_hard_lora_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004668  08004668  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004670  08004670  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004674  08004674  00014674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000070  080046e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  080046e8  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f146  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e94  00000000  00000000  0002f1e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  00031080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  00031d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002247c  00000000  00000000  00032948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d7c  00000000  00000000  00054dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca55c  00000000  00000000  0005eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012909c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  00129118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045f8 	.word	0x080045f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080045f8 	.word	0x080045f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000570:	b4b0      	push	{r4, r5, r7}
 8000572:	b08f      	sub	sp, #60	; 0x3c
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 868       ;
 8000578:	f44f 7359 	mov.w	r3, #868	; 0x364
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800057e:	2307      	movs	r3, #7
 8000580:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000584:	2307      	movs	r3, #7
 8000586:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 800058a:	2301      	movs	r3, #1
 800058c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8000590:	23ff      	movs	r3, #255	; 0xff
 8000592:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 800059c:	2308      	movs	r3, #8
 800059e:	86bb      	strh	r3, [r7, #52]	; 0x34


	return new_LoRa;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	461d      	mov	r5, r3
 80005a4:	f107 040c 	add.w	r4, r7, #12
 80005a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80005b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	373c      	adds	r7, #60	; 0x3c
 80005bc:	46bd      	mov	sp, r7
 80005be:	bcb0      	pop	{r4, r5, r7}
 80005c0:	4770      	bx	lr

080005c2 <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6898      	ldr	r0, [r3, #8]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	899b      	ldrh	r3, [r3, #12]
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	f001 fe13 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 fb42 	bl	8001c64 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6898      	ldr	r0, [r3, #8]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	899b      	ldrh	r3, [r3, #12]
 80005e8:	2201      	movs	r2, #1
 80005ea:	4619      	mov	r1, r3
 80005ec:	f001 fe08 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f001 fb37 	bl	8001c64 <HAL_Delay>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f9b1 	bl	8000972 <LoRa_read>
 8000610:	4603      	mov	r3, r0
 8000612:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000614:	7bbb      	ldrb	r3, [r7, #14]
 8000616:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d107      	bne.n	800062e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	f023 0307 	bic.w	r3, r3, #7
 8000624:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
 800062c:	e03e      	b.n	80006ac <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d10c      	bne.n	800064e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000638:	f023 0307 	bic.w	r3, r3, #7
 800063c:	b25b      	sxtb	r3, r3
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b25b      	sxtb	r3, r3
 8000644:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2201      	movs	r2, #1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	e02e      	b.n	80006ac <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b03      	cmp	r3, #3
 8000652:	d10c      	bne.n	800066e <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000658:	f023 0307 	bic.w	r3, r3, #7
 800065c:	b25b      	sxtb	r3, r3
 800065e:	f043 0303 	orr.w	r3, r3, #3
 8000662:	b25b      	sxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2203      	movs	r2, #3
 800066a:	61da      	str	r2, [r3, #28]
 800066c:	e01e      	b.n	80006ac <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	2b05      	cmp	r3, #5
 8000672:	d10c      	bne.n	800068e <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000678:	f023 0307 	bic.w	r3, r3, #7
 800067c:	b25b      	sxtb	r3, r3
 800067e:	f043 0305 	orr.w	r3, r3, #5
 8000682:	b25b      	sxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2205      	movs	r2, #5
 800068a:	61da      	str	r2, [r3, #28]
 800068c:	e00e      	b.n	80006ac <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b06      	cmp	r3, #6
 8000692:	d10b      	bne.n	80006ac <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000698:	f023 0307 	bic.w	r3, r3, #7
 800069c:	b25b      	sxtb	r3, r3
 800069e:	f043 0306 	orr.w	r3, r3, #6
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2206      	movs	r2, #6
 80006aa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	461a      	mov	r2, r3
 80006b0:	2101      	movs	r1, #1
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f978 	bl	80009a8 <LoRa_write>
	//HAL_Delay(10);
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4613      	mov	r3, r2
 80006ce:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 100 ;
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	889b      	ldrh	r3, [r3, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	f001 fd8e 	bl	8002200 <HAL_GPIO_WritePin>
	cnt = HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6998      	ldr	r0, [r3, #24]
 80006e8:	88fa      	ldrh	r2, [r7, #6]
 80006ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	f002 fa4c 	bl	8002b8c <HAL_SPI_Transmit>
 80006f4:	4603      	mov	r3, r0
 80006f6:	75fb      	strb	r3, [r7, #23]
	while ((cnt = HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY))
 80006f8:	bf00      	nop
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fe23 	bl	800334a <HAL_SPI_GetState>
 8000704:	4603      	mov	r3, r0
 8000706:	2b01      	cmp	r3, #1
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	75fb      	strb	r3, [r7, #23]
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f0      	bne.n	80006fa <LoRa_readReg+0x3a>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6998      	ldr	r0, [r3, #24]
 800071c:	8c3a      	ldrh	r2, [r7, #32]
 800071e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000722:	6839      	ldr	r1, [r7, #0]
 8000724:	f002 fb66 	bl	8002df4 <HAL_SPI_Receive>
	while ((cnt = HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY))
 8000728:	bf00      	nop
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fe0b 	bl	800334a <HAL_SPI_GetState>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	75fb      	strb	r3, [r7, #23]
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f0      	bne.n	800072a <LoRa_readReg+0x6a>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	6818      	ldr	r0, [r3, #0]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	889b      	ldrh	r3, [r3, #4]
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	f001 fd54 	bl	8002200 <HAL_GPIO_WritePin>
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	889b      	ldrh	r3, [r3, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	f001 fd40 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6998      	ldr	r0, [r3, #24]
 8000784:	88fa      	ldrh	r2, [r7, #6]
 8000786:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800078a:	68b9      	ldr	r1, [r7, #8]
 800078c:	f002 f9fe 	bl	8002b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000790:	bf00      	nop
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fdd7 	bl	800334a <HAL_SPI_GetState>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d1f7      	bne.n	8000792 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6998      	ldr	r0, [r3, #24]
 80007a6:	8b3a      	ldrh	r2, [r7, #24]
 80007a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007ac:	6839      	ldr	r1, [r7, #0]
 80007ae:	f002 f9ed 	bl	8002b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007b2:	bf00      	nop
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fdc6 	bl	800334a <HAL_SPI_GetState>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d1f7      	bne.n	80007b4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 fd16 	bl	8002200 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	04db      	lsls	r3, r3, #19
 80007ea:	115b      	asrs	r3, r3, #5
 80007ec:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80007f4:	7afb      	ldrb	r3, [r7, #11]
 80007f6:	461a      	mov	r2, r3
 80007f8:	2106      	movs	r1, #6
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f8d4 	bl	80009a8 <LoRa_write>
	HAL_Delay(5);
 8000800:	2005      	movs	r0, #5
 8000802:	f001 fa2f 	bl	8001c64 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800080c:	7afb      	ldrb	r3, [r7, #11]
 800080e:	461a      	mov	r2, r3
 8000810:	2107      	movs	r1, #7
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f000 f8c8 	bl	80009a8 <LoRa_write>
	HAL_Delay(5);
 8000818:	2005      	movs	r0, #5
 800081a:	f001 fa23 	bl	8001c64 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	461a      	mov	r2, r3
 8000826:	2108      	movs	r1, #8
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 f8bd 	bl	80009a8 <LoRa_write>
	HAL_Delay(5);
 800082e:	2005      	movs	r0, #5
 8000830:	f001 fa18 	bl	8001c64 <HAL_Delay>
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b0c      	cmp	r3, #12
 800084a:	dd01      	ble.n	8000850 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800084c:	230c      	movs	r3, #12
 800084e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b06      	cmp	r3, #6
 8000854:	dc01      	bgt.n	800085a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000856:	2307      	movs	r3, #7
 8000858:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800085a:	211e      	movs	r1, #30
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f000 f888 	bl	8000972 <LoRa_read>
 8000862:	4603      	mov	r3, r0
 8000864:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000866:	200a      	movs	r0, #10
 8000868:	f001 f9fc 	bl	8001c64 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	b2da      	uxtb	r2, r3
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4413      	add	r3, r2
 800087e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	461a      	mov	r2, r3
 8000884:	211e      	movs	r1, #30
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f88e 	bl	80009a8 <LoRa_write>
	HAL_Delay(10);
 800088c:	200a      	movs	r0, #10
 800088e:	f001 f9e9 	bl	8001c64 <HAL_Delay>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2109      	movs	r1, #9
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f87b 	bl	80009a8 <LoRa_write>
	HAL_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 f9d6 	bl	8001c64 <HAL_Delay>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b2c      	cmp	r3, #44	; 0x2c
 80008d4:	d801      	bhi.n	80008da <LoRa_setOCP+0x1a>
		current = 45;
 80008d6:	232d      	movs	r3, #45	; 0x2d
 80008d8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2bf0      	cmp	r3, #240	; 0xf0
 80008de:	d901      	bls.n	80008e4 <LoRa_setOCP+0x24>
		current = 240;
 80008e0:	23f0      	movs	r3, #240	; 0xf0
 80008e2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80008e4:	78fb      	ldrb	r3, [r7, #3]
 80008e6:	2b78      	cmp	r3, #120	; 0x78
 80008e8:	d809      	bhi.n	80008fe <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	3b2d      	subs	r3, #45	; 0x2d
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <LoRa_setOCP+0x78>)
 80008f0:	fb82 1203 	smull	r1, r2, r2, r3
 80008f4:	1052      	asrs	r2, r2, #1
 80008f6:	17db      	asrs	r3, r3, #31
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	73fb      	strb	r3, [r7, #15]
 80008fc:	e00b      	b.n	8000916 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2bf0      	cmp	r3, #240	; 0xf0
 8000902:	d808      	bhi.n	8000916 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	331e      	adds	r3, #30
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <LoRa_setOCP+0x78>)
 800090a:	fb82 1203 	smull	r1, r2, r2, r3
 800090e:	1092      	asrs	r2, r2, #2
 8000910:	17db      	asrs	r3, r3, #31
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	3320      	adds	r3, #32
 800091a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	461a      	mov	r2, r3
 8000920:	210b      	movs	r1, #11
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f840 	bl	80009a8 <LoRa_write>
	HAL_Delay(10);
 8000928:	200a      	movs	r0, #10
 800092a:	f001 f99b 	bl	8001c64 <HAL_Delay>
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	66666667 	.word	0x66666667

0800093c <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000944:	211e      	movs	r1, #30
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 f813 	bl	8000972 <LoRa_read>
 800094c:	4603      	mov	r3, r0
 800094e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	f043 0307 	orr.w	r3, r3, #7
 8000956:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	461a      	mov	r2, r3
 800095c:	211e      	movs	r1, #30
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f822 	bl	80009a8 <LoRa_write>
	HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f001 f97d 	bl	8001c64 <HAL_Delay>
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af02      	add	r7, sp, #8
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	460b      	mov	r3, r1
 800097c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000984:	b2db      	uxtb	r3, r3
 8000986:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000988:	f107 020f 	add.w	r2, r7, #15
 800098c:	f107 010e 	add.w	r1, r7, #14
 8000990:	2301      	movs	r3, #1
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	2201      	movs	r2, #1
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fe91 	bl	80006c0 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
 80009b4:	4613      	mov	r3, r2
 80009b6:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009c6:	f107 020f 	add.w	r2, r7, #15
 80009ca:	f107 010e 	add.w	r1, r7, #14
 80009ce:	2301      	movs	r3, #1
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	4613      	mov	r3, r2
 80009d4:	2201      	movs	r2, #1
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fec2 	bl	8000760 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	461a      	mov	r2, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	72fb      	strb	r3, [r7, #11]
 80009f4:	4613      	mov	r3, r2
 80009f6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	889b      	ldrh	r3, [r3, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f001 fbf7 	bl	8002200 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	6998      	ldr	r0, [r3, #24]
 8000a16:	f107 0117 	add.w	r1, r7, #23
 8000a1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f002 f8b4 	bl	8002b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a24:	bf00      	nop
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fc8d 	bl	800334a <HAL_SPI_GetState>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d1f7      	bne.n	8000a26 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6998      	ldr	r0, [r3, #24]
 8000a3a:	7abb      	ldrb	r3, [r7, #10]
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f002 f8a2 	bl	8002b8c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a48:	bf00      	nop
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fc7b 	bl	800334a <HAL_SPI_GetState>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1f7      	bne.n	8000a4a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	889b      	ldrh	r3, [r3, #4]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	f001 fbcb 	bl	8002200 <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]

	return 1;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	4611      	mov	r1, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	460b      	mov	r3, r1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	68f8      	ldr	r0, [r7, #12]
 8000aa8:	f7ff fda9 	bl	80005fe <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000aac:	210e      	movs	r1, #14
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff ff5f 	bl	8000972 <LoRa_read>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ab8:	7cfb      	ldrb	r3, [r7, #19]
 8000aba:	461a      	mov	r2, r3
 8000abc:	210d      	movs	r1, #13
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff72 	bl	80009a8 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2122      	movs	r1, #34	; 0x22
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f7ff ff6c 	bl	80009a8 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff84 	bl	80009e4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000adc:	2103      	movs	r1, #3
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fd8d 	bl	80005fe <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000ae4:	2112      	movs	r1, #18
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff43 	bl	8000972 <LoRa_read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000af0:	7cfb      	ldrb	r3, [r7, #19]
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00a      	beq.n	8000b10 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	2112      	movs	r1, #18
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ff52 	bl	80009a8 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000b04:	6979      	ldr	r1, [r7, #20]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff fd79 	bl	80005fe <LoRa_gotoMode>
			return 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e00a      	b.n	8000b26 <LoRa_transmit+0x9e>
		}
		else{
			if(--timeout==0){
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	80bb      	strh	r3, [r7, #4]
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1e3      	bne.n	8000ae4 <LoRa_transmit+0x5c>
				LoRa_gotoMode(_LoRa, mode);
 8000b1c:	6979      	ldr	r1, [r7, #20]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fd6d 	bl	80005fe <LoRa_gotoMode>
				return 0;
 8000b24:	2300      	movs	r3, #0
			}
		}
		//HAL_Delay(1);
	}

}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <LoRa_WakeUp_Transmit>:
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
}
/*
 * Lorayı transmit mode için uyandır
 */
void LoRa_WakeUp_Transmit(LoRa* _LoRa){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000b36:	2103      	movs	r1, #3
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fd60 	bl	80005fe <LoRa_gotoMode>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <LoRa_Sleep>:
void LoRa_Sleep(LoRa* _LoRa){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fd54 	bl	80005fe <LoRa_gotoMode>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b084      	sub	sp, #16
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff83 	bl	8000a72 <LoRa_isvalid>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8093 	beq.w	8000c9a <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b74:	2100      	movs	r1, #0
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff fd41 	bl	80005fe <LoRa_gotoMode>
			HAL_Delay(10);
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f001 f871 	bl	8001c64 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b82:	2101      	movs	r1, #1
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fef4 	bl	8000972 <LoRa_read>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f001 f868 	bl	8001c64 <HAL_Delay>
			data = read | 0x80;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b9a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff00 	bl	80009a8 <LoRa_write>
			HAL_Delay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f001 f85b 	bl	8001c64 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fe11 	bl	80007dc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fe69 	bl	800089a <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bce:	4619      	mov	r1, r3
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff fe75 	bl	80008c0 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bd6:	2223      	movs	r2, #35	; 0x23
 8000bd8:	210c      	movs	r1, #12
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fee4 	bl	80009a8 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff feab 	bl	800093c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fe24 	bl	800083c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	211f      	movs	r1, #31
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fed5 	bl	80009a8 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	211d      	movs	r1, #29
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fec1 	bl	80009a8 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	2120      	movs	r1, #32
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff feb7 	bl	80009a8 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	2121      	movs	r1, #33	; 0x21
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff feaf 	bl	80009a8 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c4a:	2140      	movs	r1, #64	; 0x40
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fe90 	bl	8000972 <LoRa_read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c5c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	461a      	mov	r2, r3
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff fe9f 	bl	80009a8 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fcc6 	bl	80005fe <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f000 fff3 	bl	8001c64 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c7e:	2142      	movs	r1, #66	; 0x42
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe76 	bl	8000972 <LoRa_read>
 8000c86:	4603      	mov	r3, r0
 8000c88:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	2b12      	cmp	r3, #18
 8000c8e:	d101      	bne.n	8000c94 <LoRa_init+0x136>
				return LORA_OK;
 8000c90:	23c8      	movs	r3, #200	; 0xc8
 8000c92:	e004      	b.n	8000c9e <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c94:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c98:	e001      	b.n	8000c9e <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c9a:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <MFRC522_SetTargetID>:

void SPI_mfrc_Init(void) {
	CS_PORT_NAME->ODR |= 1 << CS_PIN_NUM;
}

void MFRC522_SetTargetID(MFRC522_HandleTypeDef *MFRC522_Handle) {
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	MFRC522_Handle->myId1[0] = 49;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2231      	movs	r2, #49	; 0x31
 8000cb2:	745a      	strb	r2, [r3, #17]
	MFRC522_Handle->myId1[1] = 53;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2235      	movs	r2, #53	; 0x35
 8000cb8:	749a      	strb	r2, [r3, #18]
	MFRC522_Handle->myId1[2] = 54;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2236      	movs	r2, #54	; 0x36
 8000cbe:	74da      	strb	r2, [r3, #19]
	MFRC522_Handle->myId1[3] = 58;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	223a      	movs	r2, #58	; 0x3a
 8000cc4:	751a      	strb	r2, [r3, #20]
	MFRC522_Handle->myId1[4] = 49;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2231      	movs	r2, #49	; 0x31
 8000cca:	755a      	strb	r2, [r3, #21]

	MFRC522_Handle->myId2[0] = 32;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2220      	movs	r2, #32
 8000cd0:	759a      	strb	r2, [r3, #22]
	MFRC522_Handle->myId2[1] = 55;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2237      	movs	r2, #55	; 0x37
 8000cd6:	75da      	strb	r2, [r3, #23]
	MFRC522_Handle->myId2[2] = 52;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2234      	movs	r2, #52	; 0x34
 8000cdc:	761a      	strb	r2, [r3, #24]
	MFRC522_Handle->myId2[3] = 58;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	223a      	movs	r2, #58	; 0x3a
 8000ce2:	765a      	strb	r2, [r3, #25]
	MFRC522_Handle->myId2[4] = 49;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2231      	movs	r2, #49	; 0x31
 8000ce8:	769a      	strb	r2, [r3, #26]

	MFRC522_Handle->counter1 = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2020 	strb.w	r2, [r3, #32]
	MFRC522_Handle->counter2 = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <MFRC522_ResetCounter>:
void MFRC522_ResetCounter(MFRC522_HandleTypeDef *MFRC522_Handle) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	MFRC522_Handle->counter1 = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
	MFRC522_Handle->counter2 = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <MFRC522_ResetLedState>:
void MFRC522_ResetLedState(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(rfid_led_3_GPIO_Port, rfid_led_3_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <MFRC522_ResetLedState+0x2c>)
 8000d38:	f001 fa62 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rfid_led_2_GPIO_Port, rfid_led_2_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MFRC522_ResetLedState+0x2c>)
 8000d44:	f001 fa5c 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rfid_led_1_GPIO_Port, rfid_led_1_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <MFRC522_ResetLedState+0x2c>)
 8000d50:	f001 fa56 	bl	8002200 <HAL_GPIO_WritePin>

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40020000 	.word	0x40020000

08000d5c <MFRC522_SearchTag>:

void MFRC522_SearchTag(MFRC522_HandleTypeDef *MFRC522_Handle) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	MFRC522_Handle->status = MFRC522_Request(PICC_REQIDL, MFRC522_Handle->str);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2026      	movs	r0, #38	; 0x26
 8000d6c:	f000 f9a5 	bl	80010ba <MFRC522_Request>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	701a      	strb	r2, [r3, #0]
	if (MFRC522_Handle->status == MI_OK) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <MFRC522_SearchTag+0x30>

		HAL_GPIO_WritePin(rfid_led_1_GPIO_Port, rfid_led_1_Pin, SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MFRC522_SearchTag+0x38>)
 8000d88:	f001 fa3a 	bl	8002200 <HAL_GPIO_WritePin>
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40020000 	.word	0x40020000

08000d98 <MFRC522_DetectTargetTag>:

uint8_t MFRC522_DetectTargetTag(MFRC522_HandleTypeDef *MFRC522_Handle) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	75fb      	strb	r3, [r7, #23]

	do{
		MFRC522_Handle->status = MFRC522_Anticoll(MFRC522_Handle->str);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fa98 	bl	80012de <MFRC522_Anticoll>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	701a      	strb	r2, [r3, #0]
		temp++;
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	3301      	adds	r3, #1
 8000dba:	75fb      	strb	r3, [r7, #23]
	}while(!(MFRC522_Handle->status == MI_OK || (temp>8)));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <MFRC522_DetectTargetTag+0x32>
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	2b08      	cmp	r3, #8
 8000dc8:	d9ec      	bls.n	8000da4 <MFRC522_DetectTargetTag+0xc>

	if (MFRC522_Handle->status == MI_OK ) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 80a6 	bne.w	8000f20 <MFRC522_DetectTargetTag+0x188>

		sprintf((char*) mystr, "%3d:%3d:%3d:%3d\n\r",
				(uchar) MFRC522_Handle->str[0], (uchar) MFRC522_Handle->str[1],
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) mystr, "%3d:%3d:%3d:%3d\n\r",
 8000dd8:	4619      	mov	r1, r3
				(uchar) MFRC522_Handle->str[0], (uchar) MFRC522_Handle->str[1],
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) mystr, "%3d:%3d:%3d:%3d\n\r",
 8000dde:	4618      	mov	r0, r3
				(uchar) MFRC522_Handle->str[2], (uchar) MFRC522_Handle->str[3]);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	78db      	ldrb	r3, [r3, #3]
		sprintf((char*) mystr, "%3d:%3d:%3d:%3d\n\r",
 8000de4:	461a      	mov	r2, r3
				(uchar) MFRC522_Handle->str[2], (uchar) MFRC522_Handle->str[3]);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	791b      	ldrb	r3, [r3, #4]
		sprintf((char*) mystr, "%3d:%3d:%3d:%3d\n\r",
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	4954      	ldr	r1, [pc, #336]	; (8000f44 <MFRC522_DetectTargetTag+0x1ac>)
 8000df4:	4854      	ldr	r0, [pc, #336]	; (8000f48 <MFRC522_DetectTargetTag+0x1b0>)
 8000df6:	f002 fff9 	bl	8003dec <siprintf>

		MFRC522_Handle->counter1 = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
		MFRC522_Handle->counter2 = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		// kontrol yapısı
		for (int m = 0; m < 5; m++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e028      	b.n	8000e62 <MFRC522_DetectTargetTag+0xca>

			if (MFRC522_Handle->myId1[m] == mystr[m]) {
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4413      	add	r3, r2
 8000e16:	3311      	adds	r3, #17
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	494b      	ldr	r1, [pc, #300]	; (8000f48 <MFRC522_DetectTargetTag+0x1b0>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	440b      	add	r3, r1
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d107      	bne.n	8000e36 <MFRC522_DetectTargetTag+0x9e>
				MFRC522_Handle->counter1++;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]
			}

			if (MFRC522_Handle->myId2[m] == mystr[m]) {
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3316      	adds	r3, #22
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4941      	ldr	r1, [pc, #260]	; (8000f48 <MFRC522_DetectTargetTag+0x1b0>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	440b      	add	r3, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d107      	bne.n	8000e5c <MFRC522_DetectTargetTag+0xc4>
				MFRC522_Handle->counter2++;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		for (int m = 0; m < 5; m++) {
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	ddd3      	ble.n	8000e10 <MFRC522_DetectTargetTag+0x78>

			}
		}
		if (MFRC522_Handle->counter1 == 5) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d121      	bne.n	8000eb6 <MFRC522_DetectTargetTag+0x11e>

			HAL_GPIO_WritePin(rfid_led_2_GPIO_Port, rfid_led_2_Pin, RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e78:	4834      	ldr	r0, [pc, #208]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000e7a:	f001 f9c1 	bl	8002200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(rfid_led_3_GPIO_Port, rfid_led_3_Pin, SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	4831      	ldr	r0, [pc, #196]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000e86:	f001 f9bb 	bl	8002200 <HAL_GPIO_WritePin>
			//	HAL_Delay(10);
			for (int m = 0; m < 5; m++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e00d      	b.n	8000eac <MFRC522_DetectTargetTag+0x114>
				MFRC522_Handle->detectedID[m] = MFRC522_Handle->myId1[m];
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	3311      	adds	r3, #17
 8000e98:	7819      	ldrb	r1, [r3, #0]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	331b      	adds	r3, #27
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
			for (int m = 0; m < 5; m++) {
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	ddee      	ble.n	8000e90 <MFRC522_DetectTargetTag+0xf8>
			}
			return 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e041      	b.n	8000f3a <MFRC522_DetectTargetTag+0x1a2>
		} else if (MFRC522_Handle->counter2 == 5) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d121      	bne.n	8000f04 <MFRC522_DetectTargetTag+0x16c>

			HAL_GPIO_WritePin(rfid_led_2_GPIO_Port, rfid_led_2_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	4821      	ldr	r0, [pc, #132]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000ec8:	f001 f99a 	bl	8002200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(rfid_led_3_GPIO_Port, rfid_led_3_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000ed4:	f001 f994 	bl	8002200 <HAL_GPIO_WritePin>
			//HAL_Delay(10);
			for (int m = 0; m < 5; m++) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	e00d      	b.n	8000efa <MFRC522_DetectTargetTag+0x162>
				MFRC522_Handle->detectedID[m] = MFRC522_Handle->myId2[m];
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3316      	adds	r3, #22
 8000ee6:	7819      	ldrb	r1, [r3, #0]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	331b      	adds	r3, #27
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]
			for (int m = 0; m < 5; m++) {
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	ddee      	ble.n	8000ede <MFRC522_DetectTargetTag+0x146>
			}
			return 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e01a      	b.n	8000f3a <MFRC522_DetectTargetTag+0x1a2>
		} else {
			HAL_GPIO_WritePin(rfid_led_2_GPIO_Port, rfid_led_2_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0a:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000f0c:	f001 f978 	bl	8002200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(rfid_led_3_GPIO_Port, rfid_led_3_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000f18:	f001 f972 	bl	8002200 <HAL_GPIO_WritePin>

			return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e00c      	b.n	8000f3a <MFRC522_DetectTargetTag+0x1a2>
		}

	}
	HAL_GPIO_WritePin(rfid_led_2_GPIO_Port, rfid_led_2_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000f28:	f001 f96a 	bl	8002200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(rfid_led_3_GPIO_Port, rfid_led_3_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MFRC522_DetectTargetTag+0x1b4>)
 8000f34:	f001 f964 	bl	8002200 <HAL_GPIO_WritePin>

	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08004610 	.word	0x08004610
 8000f48:	2000009c 	.word	0x2000009c
 8000f4c:	40020000 	.word	0x40020000

08000f50 <spi_transfer>:

uint8_t spi_transfer(uint8_t byte_s) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi1, &byte_s, &rx, 1, 0xffffffff);
 8000f5a:	f107 020f 	add.w	r2, r7, #15
 8000f5e:	1df9      	adds	r1, r7, #7
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <spi_transfer+0x28>)
 8000f6a:	f002 f84c 	bl	8003006 <HAL_SPI_TransmitReceive>
	return rx;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000324 	.word	0x20000324

08000f7c <Write_MFRC522>:
	cs_set
	;

} // End PCD_ReadRegister()

void Write_MFRC522(uchar addr, uchar val) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]

	cs_clr
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <Write_MFRC522+0x4c>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <Write_MFRC522+0x4c>)
 8000f92:	f023 0308 	bic.w	r3, r3, #8
 8000f96:	6153      	str	r3, [r2, #20]
	;
	spi_transfer(((addr << 1) & 0x7E));
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ffd3 	bl	8000f50 <spi_transfer>
	spi_transfer(val);
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffcf 	bl	8000f50 <spi_transfer>
	cs_set
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <Write_MFRC522+0x4c>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <Write_MFRC522+0x4c>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6153      	str	r3, [r2, #20]
	;

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020000 	.word	0x40020000

08000fcc <Read_MFRC522>:

uchar Read_MFRC522(uchar addr) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]

	int value;
	cs_clr
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <Read_MFRC522+0x54>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <Read_MFRC522+0x54>)
 8000fdc:	f023 0308 	bic.w	r3, r3, #8
 8000fe0:	6153      	str	r3, [r2, #20]
	;
	spi_transfer((((addr << 1) & 0x7E) | 0x80));
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ff2:	b25b      	sxtb	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffaa 	bl	8000f50 <spi_transfer>
	value = spi_transfer(0x00);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ffa7 	bl	8000f50 <spi_transfer>
 8001002:	4603      	mov	r3, r0
 8001004:	60fb      	str	r3, [r7, #12]
	cs_set
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <Read_MFRC522+0x54>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <Read_MFRC522+0x54>)
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	6153      	str	r3, [r2, #20]
	;

	return value;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	b2db      	uxtb	r3, r3
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40020000 	.word	0x40020000

08001024 <MFRC522_Reset>:
 * Function Name: ResetMFRC522
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001028:	210f      	movs	r1, #15
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ffa6 	bl	8000f7c <Write_MFRC522>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <MFRC522_Init>:
 * Function Name:InitMFRC522
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001038:	f7ff fff4 	bl	8001024 <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);     // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800103c:	218d      	movs	r1, #141	; 0x8d
 800103e:	202a      	movs	r0, #42	; 0x2a
 8001040:	f7ff ff9c 	bl	8000f7c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 8001044:	213e      	movs	r1, #62	; 0x3e
 8001046:	202b      	movs	r0, #43	; 0x2b
 8001048:	f7ff ff98 	bl	8000f7c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800104c:	211e      	movs	r1, #30
 800104e:	202d      	movs	r0, #45	; 0x2d
 8001050:	f7ff ff94 	bl	8000f7c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001054:	2100      	movs	r1, #0
 8001056:	202c      	movs	r0, #44	; 0x2c
 8001058:	f7ff ff90 	bl	8000f7c <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	2015      	movs	r0, #21
 8001060:	f7ff ff8c 	bl	8000f7c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8001064:	213d      	movs	r1, #61	; 0x3d
 8001066:	2011      	movs	r0, #17
 8001068:	f7ff ff88 	bl	8000f7c <Write_MFRC522>
	// interrupts, still playing with these
	// Write_MFRC522(CommIEnReg, 0xFF);
	// Write_MFRC522(DivlEnReg, 0xFF);

	// turn antenna on
	AntennaOn();
 800106c:	f000 f802 	bl	8001074 <AntennaOn>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <AntennaOn>:
 * Function Name:AntennaOn
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 8001078:	2103      	movs	r1, #3
 800107a:	2014      	movs	r0, #20
 800107c:	f000 f802 	bl	8001084 <SetBitMask>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <SetBitMask>:
 * Function Name:SetBitMask
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff98 	bl	8000fcc <Read_MFRC522>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff65 	bl	8000f7c <Write_MFRC522>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <MFRC522_Request>:
 *    0x0200 = Mifare_One(S70)
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType) {
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af02      	add	r7, sp, #8
 80010c0:	4603      	mov	r3, r0
 80010c2:	6039      	str	r1, [r7, #0]
 80010c4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);
 80010c6:	2107      	movs	r1, #7
 80010c8:	200d      	movs	r0, #13
 80010ca:	f7ff ff57 	bl	8000f7c <Write_MFRC522>
	// TxLastBists = BitFramingReg[2..0]

	TagType[0] = reqMode;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	200c      	movs	r0, #12
 80010e2:	f000 f80f 	bl	8001104 <MFRC522_ToCard>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <MFRC522_Request+0x3c>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d001      	beq.n	80010fa <MFRC522_Request+0x40>
		status = MI_ERR;
 80010f6:	2302      	movs	r3, #2
 80010f8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,
uchar *backData, uint *backLen) {
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	4613      	mov	r3, r2
 8001114:	73bb      	strb	r3, [r7, #14]
	uchar status = MI_ERR;
 8001116:	2302      	movs	r3, #2
 8001118:	77fb      	strb	r3, [r7, #31]
	uchar irqEn = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	77bb      	strb	r3, [r7, #30]
	uchar waitIRq = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	777b      	strb	r3, [r7, #29]
	uchar lastBits;
	uchar n;
	uint i;

	switch (command) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b0c      	cmp	r3, #12
 8001126:	d007      	beq.n	8001138 <MFRC522_ToCard+0x34>
 8001128:	2b0e      	cmp	r3, #14
 800112a:	d000      	beq.n	800112e <MFRC522_ToCard+0x2a>
		irqEn = 0x77;
		waitIRq = 0x30;
		break;
	}
	default:
		break;
 800112c:	e009      	b.n	8001142 <MFRC522_ToCard+0x3e>
		irqEn = 0x12;
 800112e:	2312      	movs	r3, #18
 8001130:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8001132:	2310      	movs	r3, #16
 8001134:	777b      	strb	r3, [r7, #29]
		break;
 8001136:	e004      	b.n	8001142 <MFRC522_ToCard+0x3e>
		irqEn = 0x77;
 8001138:	2377      	movs	r3, #119	; 0x77
 800113a:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 800113c:	2330      	movs	r3, #48	; 0x30
 800113e:	777b      	strb	r3, [r7, #29]
		break;
 8001140:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);  // Interrupt request
 8001142:	7fbb      	ldrb	r3, [r7, #30]
 8001144:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	2002      	movs	r0, #2
 800114e:	f7ff ff15 	bl	8000f7c <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	2004      	movs	r0, #4
 8001156:	f000 f8a2 	bl	800129e <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);        // FlushBuffer=1, FIFO Initialization
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	200a      	movs	r0, #10
 800115e:	f7ff ff91 	bl	8001084 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE); // NO action; Cancel the current command
 8001162:	2100      	movs	r1, #0
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff ff09 	bl	8000f7c <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	e00a      	b.n	8001186 <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	2009      	movs	r0, #9
 800117c:	f7ff fefe 	bl	8000f7c <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3301      	adds	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3f0      	bcc.n	8001170 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	4619      	mov	r1, r3
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fef2 	bl	8000f7c <Write_MFRC522>
	if (command == PCD_TRANSCEIVE) {
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d103      	bne.n	80011a6 <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80); // StartSend=1,transmission of data starts
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	200d      	movs	r0, #13
 80011a2:	f7ff ff6f 	bl	8001084 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000; // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80011a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011aa:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(CommIrqReg);
 80011ac:	2004      	movs	r0, #4
 80011ae:	f7ff ff0d 	bl	8000fcc <Read_MFRC522>
 80011b2:	4603      	mov	r3, r0
 80011b4:	773b      	strb	r3, [r7, #28]
		i--;
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <MFRC522_ToCard+0xd4>
 80011c2:	7f3b      	ldrb	r3, [r7, #28]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <MFRC522_ToCard+0xd4>
 80011cc:	7f3a      	ldrb	r2, [r7, #28]
 80011ce:	7f7b      	ldrb	r3, [r7, #29]
 80011d0:	4013      	ands	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0e9      	beq.n	80011ac <MFRC522_ToCard+0xa8>
	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	200d      	movs	r0, #13
 80011dc:	f000 f85f 	bl	800129e <ClearBitMask>
	if (i != 0) {
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d053      	beq.n	800128e <MFRC522_ToCard+0x18a>
		if (!(Read_MFRC522(ErrorReg) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fef0 	bl	8000fcc <Read_MFRC522>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f003 031b 	and.w	r3, r3, #27
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d148      	bne.n	8001288 <MFRC522_ToCard+0x184>
		{
			status = MI_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 80011fa:	7f3a      	ldrb	r2, [r7, #28]
 80011fc:	7fbb      	ldrb	r3, [r7, #30]
 80011fe:	4013      	ands	r3, r2
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;             // ??
 800120a:	2301      	movs	r3, #1
 800120c:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d13f      	bne.n	8001294 <MFRC522_ToCard+0x190>
				n = Read_MFRC522(FIFOLevelReg);
 8001214:	200a      	movs	r0, #10
 8001216:	f7ff fed9 	bl	8000fcc <Read_MFRC522>
 800121a:	4603      	mov	r3, r0
 800121c:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 800121e:	200c      	movs	r0, #12
 8001220:	f7ff fed4 	bl	8000fcc <Read_MFRC522>
 8001224:	4603      	mov	r3, r0
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d008      	beq.n	8001244 <MFRC522_ToCard+0x140>
					*backLen = (n - 1) * 8 + lastBits;
 8001232:	7f3b      	ldrb	r3, [r7, #28]
 8001234:	3b01      	subs	r3, #1
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	4413      	add	r3, r2
 800123c:	461a      	mov	r2, r3
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e004      	b.n	800124e <MFRC522_ToCard+0x14a>
				} else {
					*backLen = n * 8;
 8001244:	7f3b      	ldrb	r3, [r7, #28]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	461a      	mov	r2, r3
 800124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124c:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 800124e:	7f3b      	ldrb	r3, [r7, #28]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <MFRC522_ToCard+0x154>
					n = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN) {
 8001258:	7f3b      	ldrb	r3, [r7, #28]
 800125a:	2b10      	cmp	r3, #16
 800125c:	d901      	bls.n	8001262 <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 800125e:	2310      	movs	r3, #16
 8001260:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	e00a      	b.n	800127e <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	18d4      	adds	r4, r2, r3
 800126e:	2009      	movs	r0, #9
 8001270:	f7ff feac 	bl	8000fcc <Read_MFRC522>
 8001274:	4603      	mov	r3, r0
 8001276:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	3301      	adds	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	7f3b      	ldrb	r3, [r7, #28]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	429a      	cmp	r2, r3
 8001284:	d3f0      	bcc.n	8001268 <MFRC522_ToCard+0x164>
 8001286:	e005      	b.n	8001294 <MFRC522_ToCard+0x190>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			//HAL_UART_Transmit(&huart1,(uchar *)"~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n", 54, 5000);
			status = MI_ERR;
 8001288:	2302      	movs	r3, #2
 800128a:	77fb      	strb	r3, [r7, #31]
 800128c:	e002      	b.n	8001294 <MFRC522_ToCard+0x190>
		}
	} else {
		//printf("~~~ request timed out\r\n");
		//HAL_UART_Transmit(&huart1,(uchar *)"~~~ request timed out\r\n", 23, 5000);
		HAL_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 fce8 	bl	8001c64 <HAL_Delay>
	}

	return status;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}

0800129e <ClearBitMask>:
 * Function Name: ClearBitMask
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uchar reg, uchar mask) {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	460a      	mov	r2, r1
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	4613      	mov	r3, r2
 80012ac:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fe8b 	bl	8000fcc <Read_MFRC522>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80012ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012be:	43db      	mvns	r3, r3
 80012c0:	b25a      	sxtb	r2, r3
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4013      	ands	r3, r2
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe53 	bl	8000f7c <Write_MFRC522>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <MFRC522_Anticoll>:
 * Function Name: MFRC522_Anticoll
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum) {
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af02      	add	r7, sp, #8
 80012e4:	6078      	str	r0, [r7, #4]
	uchar status;
	uchar i;
	uchar serNumCheck = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	737b      	strb	r3, [r7, #13]
	uint unLen;

	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80012ea:	2100      	movs	r1, #0
 80012ec:	200d      	movs	r0, #13
 80012ee:	f7ff fe45 	bl	8000f7c <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2293      	movs	r2, #147	; 0x93
 80012f6:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	2220      	movs	r2, #32
 80012fe:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2202      	movs	r2, #2
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	200c      	movs	r0, #12
 800130e:	f7ff fef9 	bl	8001104 <MFRC522_ToCard>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d118      	bne.n	800134e <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	73bb      	strb	r3, [r7, #14]
 8001320:	e009      	b.n	8001336 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	781a      	ldrb	r2, [r3, #0]
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	4053      	eors	r3, r2
 800132e:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	3301      	adds	r3, #1
 8001334:	73bb      	strb	r3, [r7, #14]
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d9f2      	bls.n	8001322 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	7b7a      	ldrb	r2, [r7, #13]
 8001346:	429a      	cmp	r2, r3
 8001348:	d001      	beq.n	800134e <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800134a:	2302      	movs	r3, #2
 800134c:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800135e:	f000 fc0f 	bl	8001b80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001362:	f000 f865 	bl	8001430 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001366:	f000 f985 	bl	8001674 <MX_GPIO_Init>
	MX_SPI1_Init();
 800136a:	f000 f8cb 	bl	8001504 <MX_SPI1_Init>
	MX_SPI3_Init();
 800136e:	f000 f8ff 	bl	8001570 <MX_SPI3_Init>
	MX_TIM2_Init();
 8001372:	f000 f933 	bl	80015dc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	myLoRa = newLoRa();
 8001376:	4c29      	ldr	r4, [pc, #164]	; (800141c <main+0xc4>)
 8001378:	463b      	mov	r3, r7
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8f8 	bl	8000570 <newLoRa>
 8001380:	4625      	mov	r5, r4
 8001382:	463c      	mov	r4, r7
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001390:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = GPIOE;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <main+0xc4>)
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <main+0xc8>)
 8001398:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = GPIO_PIN_15;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <main+0xc4>)
 800139c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013a0:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = GPIOE;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <main+0xc4>)
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <main+0xc8>)
 80013a6:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = GPIO_PIN_14;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <main+0xc4>)
 80013aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ae:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = GPIOE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <main+0xc4>)
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <main+0xc8>)
 80013b4:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = GPIO_PIN_13;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <main+0xc4>)
 80013b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013bc:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi3;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <main+0xc4>)
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <main+0xcc>)
 80013c2:	619a      	str	r2, [r3, #24]
	myLoRa.frequency = 868;             // default = 433 MHz
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <main+0xc4>)
 80013c6:	f44f 7259 	mov.w	r2, #868	; 0x364
 80013ca:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;            // default = SF_7
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <main+0xc4>)
 80013ce:	2207      	movs	r2, #7
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <main+0xc4>)
 80013d6:	2207      	movs	r2, #7
 80013d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;          // default = CR_4_5
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <main+0xc4>)
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <main+0xc4>)
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 100;             // default = 100 mA
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <main+0xc4>)
 80013ee:	2264      	movs	r2, #100	; 0x64
 80013f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 8;              // default = 8;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <main+0xc4>)
 80013f6:	2208      	movs	r2, #8
 80013f8:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <main+0xc4>)
 80013fc:	f7ff f8e1 	bl	80005c2 <LoRa_reset>
	LoRa_init(&myLoRa);
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <main+0xc4>)
 8001402:	f7ff fbac 	bl	8000b5e <LoRa_init>
	MFRC522_Init();
 8001406:	f7ff fe15 	bl	8001034 <MFRC522_Init>
	MFRC522_ResetLedState();
 800140a:	f7ff fc8f 	bl	8000d2c <MFRC522_ResetLedState>
	MFRC522_SetTargetID(&MFRC522_Handle);
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <main+0xd0>)
 8001410:	f7ff fc49 	bl	8000ca6 <MFRC522_SetTargetID>
	HAL_TIM_Base_Start_IT(&htim2);
 8001414:	4805      	ldr	r0, [pc, #20]	; (800142c <main+0xd4>)
 8001416:	f002 f8e2 	bl	80035de <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800141a:	e7fe      	b.n	800141a <main+0xc2>
 800141c:	200003bc 	.word	0x200003bc
 8001420:	40021000 	.word	0x40021000
 8001424:	200001c8 	.word	0x200001c8
 8001428:	200001a4 	.word	0x200001a4
 800142c:	2000037c 	.word	0x2000037c

08001430 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	; 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fccc 	bl	8003ddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <SystemClock_Config+0xcc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <SystemClock_Config+0xcc>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b25      	ldr	r3, [pc, #148]	; (80014fc <SystemClock_Config+0xcc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <SystemClock_Config+0xd0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <SystemClock_Config+0xd0>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001490:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80014a4:	23a8      	movs	r3, #168	; 0xa8
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ac:	2307      	movs	r3, #7
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fed7 	bl	8002268 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x94>
		Error_Handler();
 80014c0:	f000 f9e4 	bl	800188c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c8:	2302      	movs	r3, #2
 80014ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80014d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2105      	movs	r1, #5
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 f930 	bl	8002748 <HAL_RCC_ClockConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <SystemClock_Config+0xc2>
		Error_Handler();
 80014ee:	f000 f9cd 	bl	800188c <Error_Handler>
	}
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	; 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_SPI1_Init+0x64>)
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <MX_SPI1_Init+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_SPI1_Init+0x64>)
 8001510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001514:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_SPI1_Init+0x64>)
 8001538:	2210      	movs	r2, #16
 800153a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI1_Init+0x64>)
 8001550:	220a      	movs	r2, #10
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_SPI1_Init+0x64>)
 8001556:	f001 fab5 	bl	8002ac4 <HAL_SPI_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001560:	f000 f994 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000324 	.word	0x20000324
 800156c:	40013000 	.word	0x40013000

08001570 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_SPI3_Init+0x64>)
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <MX_SPI3_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_SPI3_Init+0x64>)
 800157c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001580:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_SPI3_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_SPI3_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_SPI3_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_SPI3_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_SPI3_Init+0x64>)
 800159c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a0:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SPI3_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_SPI3_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SPI3_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_SPI3_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SPI3_Init+0x64>)
 80015bc:	220a      	movs	r2, #10
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_SPI3_Init+0x64>)
 80015c2:	f001 fa7f 	bl	8002ac4 <HAL_SPI_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_SPI3_Init+0x60>
		Error_Handler();
 80015cc:	f000 f95e 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200001c8 	.word	0x200001c8
 80015d8:	40003c00 	.word	0x40003c00

080015dc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM2_Init+0x94>)
 80015fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42000;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM2_Init+0x94>)
 8001602:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001606:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM2_Init+0x94>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 250;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM2_Init+0x94>)
 8001610:	22fa      	movs	r2, #250	; 0xfa
 8001612:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_TIM2_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM2_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM2_Init+0x94>)
 8001622:	f001 ffb1 	bl	8003588 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x54>
		Error_Handler();
 800162c:	f000 f92e 	bl	800188c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM2_Init+0x94>)
 800163e:	f002 f8fa 	bl	8003836 <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x70>
		Error_Handler();
 8001648:	f000 f920 	bl	800188c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_TIM2_Init+0x94>)
 800165a:	f002 fb05 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001664:	f000 f912 	bl	800188c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000037c 	.word	0x2000037c

08001674 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <MX_GPIO_Init+0x128>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a42      	ldr	r2, [pc, #264]	; (800179c <MX_GPIO_Init+0x128>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <MX_GPIO_Init+0x128>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <MX_GPIO_Init+0x128>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a3b      	ldr	r2, [pc, #236]	; (800179c <MX_GPIO_Init+0x128>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <MX_GPIO_Init+0x128>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <MX_GPIO_Init+0x128>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <MX_GPIO_Init+0x128>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <MX_GPIO_Init+0x128>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <MX_GPIO_Init+0x128>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a2d      	ldr	r2, [pc, #180]	; (800179c <MX_GPIO_Init+0x128>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <MX_GPIO_Init+0x128>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001700:	4827      	ldr	r0, [pc, #156]	; (80017a0 <MX_GPIO_Init+0x12c>)
 8001702:	f000 fd7d 	bl	8002200 <HAL_GPIO_WritePin>
			rfid_cs_Pin | rfid_led_3_Pin | rfid_led_2_Pin | rfid_led_1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, lora_reset_Pin | lora_cs_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800170c:	4825      	ldr	r0, [pc, #148]	; (80017a4 <MX_GPIO_Init+0x130>)
 800170e:	f000 fd77 	bl	8002200 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, lora_led_2_Pin | lora_led_1_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001718:	4823      	ldr	r0, [pc, #140]	; (80017a8 <MX_GPIO_Init+0x134>)
 800171a:	f000 fd71 	bl	8002200 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : rfid_cs_Pin rfid_led_3_Pin rfid_led_2_Pin rfid_led_1_Pin */
	GPIO_InitStruct.Pin = rfid_cs_Pin | rfid_led_3_Pin | rfid_led_2_Pin
 800171e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001722:	617b      	str	r3, [r7, #20]
			| rfid_led_1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	481a      	ldr	r0, [pc, #104]	; (80017a0 <MX_GPIO_Init+0x12c>)
 8001738:	f000 fbc8 	bl	8001ecc <HAL_GPIO_Init>

	/*Configure GPIO pin : Lora_DIO0_Pin */
	GPIO_InitStruct.Pin = Lora_DIO0_Pin;
 800173c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001740:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_GPIO_Init+0x138>)
 8001744:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Lora_DIO0_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_GPIO_Init+0x130>)
 8001752:	f000 fbbb 	bl	8001ecc <HAL_GPIO_Init>

	/*Configure GPIO pins : lora_reset_Pin lora_cs_Pin */
	GPIO_InitStruct.Pin = lora_reset_Pin | lora_cs_Pin;
 8001756:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800175a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_GPIO_Init+0x130>)
 8001770:	f000 fbac 	bl	8001ecc <HAL_GPIO_Init>

	/*Configure GPIO pins : lora_led_2_Pin lora_led_1_Pin */
	GPIO_InitStruct.Pin = lora_led_2_Pin | lora_led_1_Pin;
 8001774:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001778:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x134>)
 800178e:	f000 fb9d 	bl	8001ecc <HAL_GPIO_Init>

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40020800 	.word	0x40020800
 80017ac:	10110000 	.word	0x10110000

080017b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

	MFRC522_ResetCounter(&MFRC522_Handle);
 80017b8:	482d      	ldr	r0, [pc, #180]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017ba:	f7ff faa4 	bl	8000d06 <MFRC522_ResetCounter>
//	MFRC522_ResetLedState();
	MFRC522_SearchTag(&MFRC522_Handle);
 80017be:	482c      	ldr	r0, [pc, #176]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017c0:	f7ff facc 	bl	8000d5c <MFRC522_SearchTag>
	OK = MFRC522_DetectTargetTag(&MFRC522_Handle);
 80017c4:	482a      	ldr	r0, [pc, #168]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017c6:	f7ff fae7 	bl	8000d98 <MFRC522_DetectTargetTag>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017d0:	701a      	strb	r2, [r3, #0]
	send_data[0] = 19; //myPassword
 80017d2:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80017d4:	2213      	movs	r2, #19
 80017d6:	701a      	strb	r2, [r3, #0]
	send_data[1] = 07;
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80017da:	2207      	movs	r2, #7
 80017dc:	705a      	strb	r2, [r3, #1]

	if (OK == 1) {
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d112      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x5c>
		for (int m = 0; m < 5; m++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e00b      	b.n	8001804 <HAL_TIM_PeriodElapsedCallback+0x54>
			send_data[m+2] = MFRC522_Handle.detectedID[m];
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3302      	adds	r3, #2
 80017f0:	491f      	ldr	r1, [pc, #124]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	440a      	add	r2, r1
 80017f6:	321b      	adds	r2, #27
 80017f8:	7811      	ldrb	r1, [r2, #0]
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80017fc:	54d1      	strb	r1, [r2, r3]
		for (int m = 0; m < 5; m++) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3301      	adds	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b04      	cmp	r3, #4
 8001808:	ddf0      	ble.n	80017ec <HAL_TIM_PeriodElapsedCallback+0x3c>
 800180a:	e00d      	b.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x78>
		}

	} else {
		for (int m = 0; m < 5; m++) {
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	e007      	b.n	8001822 <HAL_TIM_PeriodElapsedCallback+0x72>
			send_data[m+2] = 0;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3302      	adds	r3, #2
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001818:	2100      	movs	r1, #0
 800181a:	54d1      	strb	r1, [r2, r3]
		for (int m = 0; m < 5; m++) {
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3301      	adds	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b04      	cmp	r3, #4
 8001826:	ddf4      	ble.n	8001812 <HAL_TIM_PeriodElapsedCallback+0x62>
		}
	}
	LoRa_WakeUp_Transmit(&myLoRa);
 8001828:	4814      	ldr	r0, [pc, #80]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800182a:	f7ff f980 	bl	8000b2e <LoRa_WakeUp_Transmit>
	do {
		transmitOK = LoRa_transmit(&myLoRa, send_data, 7, 100);
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	2207      	movs	r2, #7
 8001832:	4911      	ldr	r1, [pc, #68]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001834:	4811      	ldr	r0, [pc, #68]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001836:	f7ff f927 	bl	8000a88 <LoRa_transmit>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001840:	701a      	strb	r2, [r3, #0]
	} while (transmitOK != 1);
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d1f1      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0x7e>
	HAL_GPIO_TogglePin(lora_led_2_GPIO_Port, lora_led_2_Pin);
 800184a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001850:	f000 fcef 	bl	8002232 <HAL_GPIO_TogglePin>
	trueRate++;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800185e:	701a      	strb	r2, [r3, #0]
	LoRa_Sleep(&myLoRa);
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001862:	f7ff f970 	bl	8000b46 <LoRa_Sleep>

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001a4 	.word	0x200001a4
 8001874:	200002a0 	.word	0x200002a0
 8001878:	200002a4 	.word	0x200002a4
 800187c:	200003bc 	.word	0x200003bc
 8001880:	200002a1 	.word	0x200002a1
 8001884:	40020800 	.word	0x40020800
 8001888:	2000008c 	.word	0x2000008c

0800188c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001892:	e7fe      	b.n	8001892 <Error_Handler+0x6>

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <HAL_MspInit+0x4c>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_MspInit+0x4c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_MspInit+0x4c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018d2:	2007      	movs	r0, #7
 80018d4:	f000 fab8 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a32      	ldr	r2, [pc, #200]	; (80019cc <HAL_SPI_MspInit+0xe8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12c      	bne.n	8001960 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800193e:	23e0      	movs	r3, #224	; 0xe0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194e:	2305      	movs	r3, #5
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	481e      	ldr	r0, [pc, #120]	; (80019d4 <HAL_SPI_MspInit+0xf0>)
 800195a:	f000 fab7 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800195e:	e031      	b.n	80019c4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_SPI_MspInit+0xf4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12c      	bne.n	80019c4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_SPI_MspInit+0xec>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80019a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019b4:	2306      	movs	r3, #6
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <HAL_SPI_MspInit+0xf8>)
 80019c0:	f000 fa84 	bl	8001ecc <HAL_GPIO_Init>
}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40013000 	.word	0x40013000
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40003c00 	.word	0x40003c00
 80019dc:	40020800 	.word	0x40020800

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d115      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_TIM_Base_MspInit+0x48>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201c      	movs	r0, #28
 8001a14:	f000 fa23 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a18:	201c      	movs	r0, #28
 8001a1a:	f000 fa3c 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 f8d4 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM2_IRQHandler+0x10>)
 8001a86:	f001 fdce 	bl	8003626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000037c 	.word	0x2000037c

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f002 f960 	bl	8003d88 <__errno>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	230c      	movs	r3, #12
 8001acc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20020000 	.word	0x20020000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	20000090 	.word	0x20000090
 8001afc:	200003f0 	.word	0x200003f0

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SystemInit+0x28>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <SystemInit+0x28>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SystemInit+0x28>)
 8001b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b32:	e003      	b.n	8001b3c <LoopCopyDataInit>

08001b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b3a:	3104      	adds	r1, #4

08001b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b44:	d3f6      	bcc.n	8001b34 <CopyDataInit>
  ldr  r2, =_sbss
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b48:	e002      	b.n	8001b50 <LoopFillZerobss>

08001b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b4c:	f842 3b04 	str.w	r3, [r2], #4

08001b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b54:	d3f9      	bcc.n	8001b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b56:	f7ff ffd3 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f002 f91b 	bl	8003d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b5e:	f7ff fbfb 	bl	8001358 <main>
  bx  lr    
 8001b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b68:	08004678 	.word	0x08004678
  ldr  r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b70:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001b74:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001b78:	200003f0 	.word	0x200003f0

08001b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_Init+0x40>)
 8001b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <HAL_Init+0x40>)
 8001b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_Init+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_Init+0x40>)
 8001ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f94d 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff fe6e 	bl	8001894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f965 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f92d 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	200003e8 	.word	0x200003e8

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200003e8 	.word	0x200003e8

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff ffee 	bl	8001c4c <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_Delay+0x40>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffde 	bl	8001c4c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e16b      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 815a 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d00b      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1a:	2b11      	cmp	r3, #17
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b12      	cmp	r3, #18
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0xfc>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b12      	cmp	r3, #18
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b4 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a5e      	ldr	r2, [pc, #376]	; (80021d4 <HAL_GPIO_Init+0x308>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_GPIO_Init+0x308>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a51      	ldr	r2, [pc, #324]	; (80021dc <HAL_GPIO_Init+0x310>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a50      	ldr	r2, [pc, #320]	; (80021e0 <HAL_GPIO_Init+0x314>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4f      	ldr	r2, [pc, #316]	; (80021e4 <HAL_GPIO_Init+0x318>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_GPIO_Init+0x324>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_GPIO_Init+0x328>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4a      	ldr	r2, [pc, #296]	; (80021f8 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002136:	4a31      	ldr	r2, [pc, #196]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <HAL_GPIO_Init+0x330>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002160:	4a26      	ldr	r2, [pc, #152]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_GPIO_Init+0x330>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_GPIO_Init+0x330>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_GPIO_Init+0x330>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae90 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
 800220c:	4613      	mov	r3, r2
 800220e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002210:	787b      	ldrb	r3, [r7, #1]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800221c:	e003      	b.n	8002226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	041a      	lsls	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	401a      	ands	r2, r3
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	429a      	cmp	r2, r3
 800224a:	d104      	bne.n	8002256 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	041a      	lsls	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e25b      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d075      	beq.n	8002372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	4ba3      	ldr	r3, [pc, #652]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4ba0      	ldr	r3, [pc, #640]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d112      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b9d      	ldr	r3, [pc, #628]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05b      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d157      	bne.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e236      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x74>
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a90      	ldr	r2, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a87      	ldr	r2, [pc, #540]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a83      	ldr	r2, [pc, #524]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a80      	ldr	r2, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fc94 	bl	8001c4c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fc90 	bl	8001c4c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1fb      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xc0>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fc80 	bl	8001c4c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fc7c 	bl	8001c4c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1e7      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1bb      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4952      	ldr	r1, [pc, #328]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_OscConfig+0x2b0>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff fc35 	bl	8001c4c <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff fc31 	bl	8001c4c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e19c      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4940      	ldr	r1, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x2b0>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fc14 	bl	8001c4c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff fc10 	bl	8001c4c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e17b      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x2b4>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff fbf4 	bl	8001c4c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff fbf0 	bl	8001c4c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e15b      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x200>
 8002486:	e015      	b.n	80024b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x2b4>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff fbdd 	bl	8001c4c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002496:	f7ff fbd9 	bl	8001c4c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e144      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a0 	beq.w	8002602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d121      	bne.n	8002542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7ff fb9f 	bl	8001c4c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e011      	b.n	8002536 <HAL_RCC_OscConfig+0x2ce>
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
 8002520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7ff fb92 	bl	8001c4c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0fd      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x4d4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f0>
 800254a:	4b7d      	ldr	r3, [pc, #500]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a7c      	ldr	r2, [pc, #496]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x32a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x312>
 8002560:	4b77      	ldr	r3, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a76      	ldr	r2, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b74      	ldr	r3, [pc, #464]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a73      	ldr	r2, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x32a>
 800257a:	4b71      	ldr	r3, [pc, #452]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a70      	ldr	r2, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a6d      	ldr	r2, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7ff fb57 	bl	8001c4c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fb53 	bl	8001c4c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0bc      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x33a>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb41 	bl	8001c4c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fb3d 	bl	8001c4c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0a6      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8092 	beq.w	8002730 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800260c:	4b4c      	ldr	r3, [pc, #304]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d05c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d141      	bne.n	80026a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b48      	ldr	r3, [pc, #288]	; (8002744 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7ff fb11 	bl	8001c4c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262e:	f7ff fb0d 	bl	8001c4c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e078      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	4933      	ldr	r1, [pc, #204]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x4dc>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fae6 	bl	8001c4c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7ff fae2 	bl	8001c4c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e04d      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x41c>
 80026a2:	e045      	b.n	8002730 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b27      	ldr	r3, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff facf 	bl	8001c4c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff facb 	bl	8001c4c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e036      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x44a>
 80026d0:	e02e      	b.n	8002730 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e029      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d115      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002706:	4013      	ands	r3, r2
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800270c:	4293      	cmp	r3, r2
 800270e:	d10d      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40007000 	.word	0x40007000
 8002740:	40023800 	.word	0x40023800
 8002744:	42470060 	.word	0x42470060

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0cc      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b68      	ldr	r3, [pc, #416]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d90c      	bls.n	8002784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b63      	ldr	r3, [pc, #396]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b8      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a58      	ldr	r2, [pc, #352]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a52      	ldr	r2, [pc, #328]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	494d      	ldr	r1, [pc, #308]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d044      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d119      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	2b03      	cmp	r3, #3
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b3f      	ldr	r3, [pc, #252]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e067      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4934      	ldr	r1, [pc, #208]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7ff fa08 	bl	8001c4c <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7ff fa04 	bl	8001c4c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e032      	b.n	80028f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800289c:	4b19      	ldr	r3, [pc, #100]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4916      	ldr	r1, [pc, #88]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	490e      	ldr	r1, [pc, #56]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ce:	f000 f821 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028d2:	4601      	mov	r1, r0
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	fa21 f303 	lsr.w	r3, r1, r3
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f968 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00
 8002904:	40023800 	.word	0x40023800
 8002908:	08004624 	.word	0x08004624
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d007      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x32>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d008      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x38>
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 80b4 	bne.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002942:	60bb      	str	r3, [r7, #8]
       break;
 8002944:	e0b3      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002946:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002948:	60bb      	str	r3, [r7, #8]
      break;
 800294a:	e0b0      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4b5a      	ldr	r3, [pc, #360]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002954:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d04a      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	ea03 0501 	and.w	r5, r3, r1
 8002978:	ea04 0602 	and.w	r6, r4, r2
 800297c:	4629      	mov	r1, r5
 800297e:	4632      	mov	r2, r6
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f04f 0400 	mov.w	r4, #0
 8002988:	0154      	lsls	r4, r2, #5
 800298a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800298e:	014b      	lsls	r3, r1, #5
 8002990:	4619      	mov	r1, r3
 8002992:	4622      	mov	r2, r4
 8002994:	1b49      	subs	r1, r1, r5
 8002996:	eb62 0206 	sbc.w	r2, r2, r6
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	f04f 0400 	mov.w	r4, #0
 80029a2:	0194      	lsls	r4, r2, #6
 80029a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a8:	018b      	lsls	r3, r1, #6
 80029aa:	1a5b      	subs	r3, r3, r1
 80029ac:	eb64 0402 	sbc.w	r4, r4, r2
 80029b0:	f04f 0100 	mov.w	r1, #0
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	00e2      	lsls	r2, r4, #3
 80029ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029be:	00d9      	lsls	r1, r3, #3
 80029c0:	460b      	mov	r3, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	195b      	adds	r3, r3, r5
 80029c6:	eb44 0406 	adc.w	r4, r4, r6
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	0262      	lsls	r2, r4, #9
 80029d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029d8:	0259      	lsls	r1, r3, #9
 80029da:	460b      	mov	r3, r1
 80029dc:	4614      	mov	r4, r2
 80029de:	4618      	mov	r0, r3
 80029e0:	4621      	mov	r1, r4
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f04f 0400 	mov.w	r4, #0
 80029e8:	461a      	mov	r2, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f7fd fc40 	bl	8000270 <__aeabi_uldivmod>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e049      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f8:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	f04f 0400 	mov.w	r4, #0
 8002a02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	ea03 0501 	and.w	r5, r3, r1
 8002a0e:	ea04 0602 	and.w	r6, r4, r2
 8002a12:	4629      	mov	r1, r5
 8002a14:	4632      	mov	r2, r6
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f04f 0400 	mov.w	r4, #0
 8002a1e:	0154      	lsls	r4, r2, #5
 8002a20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a24:	014b      	lsls	r3, r1, #5
 8002a26:	4619      	mov	r1, r3
 8002a28:	4622      	mov	r2, r4
 8002a2a:	1b49      	subs	r1, r1, r5
 8002a2c:	eb62 0206 	sbc.w	r2, r2, r6
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	f04f 0400 	mov.w	r4, #0
 8002a38:	0194      	lsls	r4, r2, #6
 8002a3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a3e:	018b      	lsls	r3, r1, #6
 8002a40:	1a5b      	subs	r3, r3, r1
 8002a42:	eb64 0402 	sbc.w	r4, r4, r2
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	00e2      	lsls	r2, r4, #3
 8002a50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a54:	00d9      	lsls	r1, r3, #3
 8002a56:	460b      	mov	r3, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	195b      	adds	r3, r3, r5
 8002a5c:	eb44 0406 	adc.w	r4, r4, r6
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	02a2      	lsls	r2, r4, #10
 8002a6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a6e:	0299      	lsls	r1, r3, #10
 8002a70:	460b      	mov	r3, r1
 8002a72:	4614      	mov	r4, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	4621      	mov	r1, r4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f04f 0400 	mov.w	r4, #0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4623      	mov	r3, r4
 8002a82:	f7fd fbf5 	bl	8000270 <__aeabi_uldivmod>
 8002a86:	4603      	mov	r3, r0
 8002a88:	460c      	mov	r4, r1
 8002a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aaa:	60bb      	str	r3, [r7, #8]
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	68bb      	ldr	r3, [r7, #8]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e056      	b.n	8002b84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7fe fef7 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	ea42 0103 	orr.w	r1, r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 0104 	and.w	r1, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_SPI_Transmit+0x22>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e11e      	b.n	8002dec <HAL_SPI_Transmit+0x260>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bb6:	f7ff f849 	bl	8001c4c <HAL_GetTick>
 8002bba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d002      	beq.n	8002bd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bd0:	e103      	b.n	8002dda <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_SPI_Transmit+0x52>
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002be2:	e0fa      	b.n	8002dda <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2203      	movs	r2, #3
 8002be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	88fa      	ldrh	r2, [r7, #6]
 8002bfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2a:	d107      	bne.n	8002c3c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d007      	beq.n	8002c5a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c62:	d14b      	bne.n	8002cfc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_SPI_Transmit+0xe6>
 8002c6c:	8afb      	ldrh	r3, [r7, #22]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d13e      	bne.n	8002cf0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	881a      	ldrh	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	1c9a      	adds	r2, r3, #2
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c96:	e02b      	b.n	8002cf0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d112      	bne.n	8002ccc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	1c9a      	adds	r2, r3, #2
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cca:	e011      	b.n	8002cf0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ccc:	f7fe ffbe 	bl	8001c4c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d803      	bhi.n	8002ce4 <HAL_SPI_Transmit+0x158>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x15e>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cee:	e074      	b.n	8002dda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ce      	bne.n	8002c98 <HAL_SPI_Transmit+0x10c>
 8002cfa:	e04c      	b.n	8002d96 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_Transmit+0x17e>
 8002d04:	8afb      	ldrh	r3, [r7, #22]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d140      	bne.n	8002d8c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d30:	e02c      	b.n	8002d8c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d113      	bne.n	8002d68 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d66:	e011      	b.n	8002d8c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d68:	f7fe ff70 	bl	8001c4c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d803      	bhi.n	8002d80 <HAL_SPI_Transmit+0x1f4>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d102      	bne.n	8002d86 <HAL_SPI_Transmit+0x1fa>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d8a:	e026      	b.n	8002dda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1cd      	bne.n	8002d32 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fbb2 	bl	8003504 <SPI_EndRxTxTransaction>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e000      	b.n	8002dda <HAL_SPI_Transmit+0x24e>
  }

error:
 8002dd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e10:	d112      	bne.n	8002e38 <HAL_SPI_Receive+0x44>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10e      	bne.n	8002e38 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f8e9 	bl	8003006 <HAL_SPI_TransmitReceive>
 8002e34:	4603      	mov	r3, r0
 8002e36:	e0e2      	b.n	8002ffe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_SPI_Receive+0x52>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0db      	b.n	8002ffe <HAL_SPI_Receive+0x20a>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e4e:	f7fe fefd 	bl	8001c4c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
 8002e62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e64:	e0c2      	b.n	8002fec <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_SPI_Receive+0x7e>
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e76:	e0b9      	b.n	8002fec <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebe:	d107      	bne.n	8002ed0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d007      	beq.n	8002eee <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d162      	bne.n	8002fbc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ef6:	e02e      	b.n	8002f56 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d115      	bne.n	8002f32 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f103 020c 	add.w	r2, r3, #12
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	7812      	ldrb	r2, [r2, #0]
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f30:	e011      	b.n	8002f56 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f32:	f7fe fe8b 	bl	8001c4c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d803      	bhi.n	8002f4a <HAL_SPI_Receive+0x156>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d102      	bne.n	8002f50 <HAL_SPI_Receive+0x15c>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f54:	e04a      	b.n	8002fec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1cb      	bne.n	8002ef8 <HAL_SPI_Receive+0x104>
 8002f60:	e031      	b.n	8002fc6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d113      	bne.n	8002f98 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	1c9a      	adds	r2, r3, #2
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f96:	e011      	b.n	8002fbc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f98:	f7fe fe58 	bl	8001c4c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d803      	bhi.n	8002fb0 <HAL_SPI_Receive+0x1bc>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Receive+0x1c2>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fba:	e017      	b.n	8002fec <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cd      	bne.n	8002f62 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fa35 	bl	800343a <SPI_EndRxTransaction>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
 8002fe8:	e000      	b.n	8002fec <HAL_SPI_Receive+0x1f8>
  }

error :
 8002fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b08c      	sub	sp, #48	; 0x30
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003014:	2301      	movs	r3, #1
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_SPI_TransmitReceive+0x26>
 8003028:	2302      	movs	r3, #2
 800302a:	e18a      	b.n	8003342 <HAL_SPI_TransmitReceive+0x33c>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003034:	f7fe fe0a 	bl	8001c4c <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800304e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00f      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x70>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305c:	d107      	bne.n	800306e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_SPI_TransmitReceive+0x68>
 8003066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800306a:	2b04      	cmp	r3, #4
 800306c:	d003      	beq.n	8003076 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003074:	e15b      	b.n	800332e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x82>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x82>
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800308e:	e14e      	b.n	800332e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b04      	cmp	r3, #4
 800309a:	d003      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2205      	movs	r2, #5
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d007      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003100:	d178      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x10a>
 800310a:	8b7b      	ldrh	r3, [r7, #26]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d166      	bne.n	80031de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	881a      	ldrh	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	1c9a      	adds	r2, r3, #2
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003134:	e053      	b.n	80031de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11b      	bne.n	800317c <HAL_SPI_TransmitReceive+0x176>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_SPI_TransmitReceive+0x176>
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d113      	bne.n	800317c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	881a      	ldrh	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d119      	bne.n	80031be <HAL_SPI_TransmitReceive+0x1b8>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d014      	beq.n	80031be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	b292      	uxth	r2, r2
 80031a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	1c9a      	adds	r2, r3, #2
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ba:	2301      	movs	r3, #1
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031be:	f7fe fd45 	bl	8001c4c <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d807      	bhi.n	80031de <HAL_SPI_TransmitReceive+0x1d8>
 80031ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d003      	beq.n	80031de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031dc:	e0a7      	b.n	800332e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1a6      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x130>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1a1      	bne.n	8003136 <HAL_SPI_TransmitReceive+0x130>
 80031f2:	e07c      	b.n	80032ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x1fc>
 80031fc:	8b7b      	ldrh	r3, [r7, #26]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d16b      	bne.n	80032da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	7812      	ldrb	r2, [r2, #0]
 800320e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003228:	e057      	b.n	80032da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d11c      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x26c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d017      	beq.n	8003272 <HAL_SPI_TransmitReceive+0x26c>
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d114      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	330c      	adds	r3, #12
 8003252:	7812      	ldrb	r2, [r2, #0]
 8003254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d119      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x2ae>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d014      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032b0:	2301      	movs	r3, #1
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032b4:	f7fe fcca 	bl	8001c4c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d803      	bhi.n	80032cc <HAL_SPI_TransmitReceive+0x2c6>
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d102      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x2cc>
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032d8:	e029      	b.n	800332e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1a2      	bne.n	800322a <HAL_SPI_TransmitReceive+0x224>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d19d      	bne.n	800322a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f906 	bl	8003504 <SPI_EndRxTxTransaction>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800330a:	e010      	b.n	800332e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	e000      	b.n	800332e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800332c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800333e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003342:	4618      	mov	r0, r3
 8003344:	3730      	adds	r7, #48	; 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003358:	b2db      	uxtb	r3, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	e04c      	b.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d048      	beq.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003380:	f7fe fc64 	bl	8001c4c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d902      	bls.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13d      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ae:	d111      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b8:	d004      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d107      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033dc:	d10f      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	429a      	cmp	r2, r3
 800342e:	d1a3      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af02      	add	r7, sp, #8
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344e:	d111      	bne.n	8003474 <SPI_EndRxTransaction+0x3a>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003458:	d004      	beq.n	8003464 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d107      	bne.n	8003474 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800347c:	d12a      	bne.n	80034d4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d012      	beq.n	80034ae <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2200      	movs	r2, #0
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7ff ff67 	bl	8003366 <SPI_WaitFlagStateUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d02d      	beq.n	80034fa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e026      	b.n	80034fc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2101      	movs	r1, #1
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff ff54 	bl	8003366 <SPI_WaitFlagStateUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01a      	beq.n	80034fa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e013      	b.n	80034fc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	2101      	movs	r1, #1
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff ff41 	bl	8003366 <SPI_WaitFlagStateUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f043 0220 	orr.w	r2, r3, #32
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e000      	b.n	80034fc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <SPI_EndRxTxTransaction+0x7c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1b      	ldr	r2, [pc, #108]	; (8003584 <SPI_EndRxTxTransaction+0x80>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0d5b      	lsrs	r3, r3, #21
 800351c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d112      	bne.n	8003556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff ff13 	bl	8003366 <SPI_WaitFlagStateUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3b01      	subs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d0f2      	beq.n	8003556 <SPI_EndRxTxTransaction+0x52>
 8003570:	e000      	b.n	8003574 <SPI_EndRxTxTransaction+0x70>
        break;
 8003572:	bf00      	nop
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000
 8003584:	165e9f81 	.word	0x165e9f81

08003588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e01d      	b.n	80035d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe fa16 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f000 fa14 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b06      	cmp	r3, #6
 8003606:	d007      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d122      	bne.n	8003682 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d11b      	bne.n	8003682 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f06f 0202 	mvn.w	r2, #2
 8003652:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9a5 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 800366e:	e005      	b.n	800367c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f997 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9a8 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d122      	bne.n	80036d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d11b      	bne.n	80036d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0204 	mvn.w	r2, #4
 80036a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f97b 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 80036c2:	e005      	b.n	80036d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f96d 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f97e 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d122      	bne.n	800372a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11b      	bne.n	800372a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f06f 0208 	mvn.w	r2, #8
 80036fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2204      	movs	r2, #4
 8003700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f951 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 8003716:	e005      	b.n	8003724 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f943 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f954 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d122      	bne.n	800377e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d11b      	bne.n	800377e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f06f 0210 	mvn.w	r2, #16
 800374e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2208      	movs	r2, #8
 8003754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f927 	bl	80039b8 <HAL_TIM_IC_CaptureCallback>
 800376a:	e005      	b.n	8003778 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f919 	bl	80039a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f92a 	bl	80039cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10e      	bne.n	80037aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d107      	bne.n	80037aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f06f 0201 	mvn.w	r2, #1
 80037a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fe f803 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	d10e      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 facf 	bl	8003d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d10e      	bne.n	8003802 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8ef 	bl	80039e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b20      	cmp	r3, #32
 800380e:	d10e      	bne.n	800382e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b20      	cmp	r3, #32
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0220 	mvn.w	r2, #32
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa99 	bl	8003d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_TIM_ConfigClockSource+0x18>
 800384a:	2302      	movs	r3, #2
 800384c:	e0a6      	b.n	800399c <HAL_TIM_ConfigClockSource+0x166>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800386c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003874:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d067      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x120>
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d80b      	bhi.n	80038a2 <HAL_TIM_ConfigClockSource+0x6c>
 800388a:	2b10      	cmp	r3, #16
 800388c:	d073      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x140>
 800388e:	2b10      	cmp	r3, #16
 8003890:	d802      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x62>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d06f      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003896:	e078      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003898:	2b20      	cmp	r3, #32
 800389a:	d06c      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x140>
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d06a      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038a0:	e073      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038a2:	2b70      	cmp	r3, #112	; 0x70
 80038a4:	d00d      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x8c>
 80038a6:	2b70      	cmp	r3, #112	; 0x70
 80038a8:	d804      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x7e>
 80038aa:	2b50      	cmp	r3, #80	; 0x50
 80038ac:	d033      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0xe0>
 80038ae:	2b60      	cmp	r3, #96	; 0x60
 80038b0:	d041      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038b2:	e06a      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d066      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0x152>
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d017      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038c0:	e063      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6899      	ldr	r1, [r3, #8]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f000 f9a9 	bl	8003c28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	609a      	str	r2, [r3, #8]
      break;
 80038ee:	e04c      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f000 f992 	bl	8003c28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003912:	609a      	str	r2, [r3, #8]
      break;
 8003914:	e039      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	461a      	mov	r2, r3
 8003924:	f000 f906 	bl	8003b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2150      	movs	r1, #80	; 0x50
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f95f 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003934:	e029      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f925 	bl	8003b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2160      	movs	r1, #96	; 0x60
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f94f 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003954:	e019      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	461a      	mov	r2, r3
 8003964:	f000 f8e6 	bl	8003b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2140      	movs	r1, #64	; 0x40
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f93f 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003974:	e009      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f000 f936 	bl	8003bf2 <TIM_ITRx_SetConfig>
      break;
 8003986:	e000      	b.n	800398a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003988:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a40      	ldr	r2, [pc, #256]	; (8003b08 <TIM_Base_SetConfig+0x114>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d00f      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3d      	ldr	r2, [pc, #244]	; (8003b0c <TIM_Base_SetConfig+0x118>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <TIM_Base_SetConfig+0x11c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a3b      	ldr	r2, [pc, #236]	; (8003b14 <TIM_Base_SetConfig+0x120>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x40>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <TIM_Base_SetConfig+0x124>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a2f      	ldr	r2, [pc, #188]	; (8003b08 <TIM_Base_SetConfig+0x114>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d027      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <TIM_Base_SetConfig+0x118>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d023      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a2b      	ldr	r2, [pc, #172]	; (8003b10 <TIM_Base_SetConfig+0x11c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <TIM_Base_SetConfig+0x120>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <TIM_Base_SetConfig+0x124>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d017      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <TIM_Base_SetConfig+0x128>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <TIM_Base_SetConfig+0x12c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00f      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <TIM_Base_SetConfig+0x130>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <TIM_Base_SetConfig+0x134>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <TIM_Base_SetConfig+0x138>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <TIM_Base_SetConfig+0x13c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <TIM_Base_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0xf8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <TIM_Base_SetConfig+0x124>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d103      	bne.n	8003af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40010400 	.word	0x40010400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	40001800 	.word	0x40001800
 8003b2c:	40001c00 	.word	0x40001c00
 8003b30:	40002000 	.word	0x40002000

08003b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 030a 	bic.w	r3, r3, #10
 8003b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b087      	sub	sp, #28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f023 0210 	bic.w	r2, r3, #16
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	031b      	lsls	r3, r3, #12
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f043 0307 	orr.w	r3, r3, #7
 8003c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e05a      	b.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a21      	ldr	r2, [pc, #132]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d01d      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10c      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40001800 	.word	0x40001800

08003d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <__errno>:
 8003d88:	4b01      	ldr	r3, [pc, #4]	; (8003d90 <__errno+0x8>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	2000000c 	.word	0x2000000c

08003d94 <__libc_init_array>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4e0d      	ldr	r6, [pc, #52]	; (8003dcc <__libc_init_array+0x38>)
 8003d98:	4c0d      	ldr	r4, [pc, #52]	; (8003dd0 <__libc_init_array+0x3c>)
 8003d9a:	1ba4      	subs	r4, r4, r6
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	2500      	movs	r5, #0
 8003da0:	42a5      	cmp	r5, r4
 8003da2:	d109      	bne.n	8003db8 <__libc_init_array+0x24>
 8003da4:	4e0b      	ldr	r6, [pc, #44]	; (8003dd4 <__libc_init_array+0x40>)
 8003da6:	4c0c      	ldr	r4, [pc, #48]	; (8003dd8 <__libc_init_array+0x44>)
 8003da8:	f000 fc26 	bl	80045f8 <_init>
 8003dac:	1ba4      	subs	r4, r4, r6
 8003dae:	10a4      	asrs	r4, r4, #2
 8003db0:	2500      	movs	r5, #0
 8003db2:	42a5      	cmp	r5, r4
 8003db4:	d105      	bne.n	8003dc2 <__libc_init_array+0x2e>
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dbc:	4798      	blx	r3
 8003dbe:	3501      	adds	r5, #1
 8003dc0:	e7ee      	b.n	8003da0 <__libc_init_array+0xc>
 8003dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dc6:	4798      	blx	r3
 8003dc8:	3501      	adds	r5, #1
 8003dca:	e7f2      	b.n	8003db2 <__libc_init_array+0x1e>
 8003dcc:	08004670 	.word	0x08004670
 8003dd0:	08004670 	.word	0x08004670
 8003dd4:	08004670 	.word	0x08004670
 8003dd8:	08004674 	.word	0x08004674

08003ddc <memset>:
 8003ddc:	4402      	add	r2, r0
 8003dde:	4603      	mov	r3, r0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <siprintf>:
 8003dec:	b40e      	push	{r1, r2, r3}
 8003dee:	b500      	push	{lr}
 8003df0:	b09c      	sub	sp, #112	; 0x70
 8003df2:	ab1d      	add	r3, sp, #116	; 0x74
 8003df4:	9002      	str	r0, [sp, #8]
 8003df6:	9006      	str	r0, [sp, #24]
 8003df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dfc:	4809      	ldr	r0, [pc, #36]	; (8003e24 <siprintf+0x38>)
 8003dfe:	9107      	str	r1, [sp, #28]
 8003e00:	9104      	str	r1, [sp, #16]
 8003e02:	4909      	ldr	r1, [pc, #36]	; (8003e28 <siprintf+0x3c>)
 8003e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e08:	9105      	str	r1, [sp, #20]
 8003e0a:	6800      	ldr	r0, [r0, #0]
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	a902      	add	r1, sp, #8
 8003e10:	f000 f866 	bl	8003ee0 <_svfiprintf_r>
 8003e14:	9b02      	ldr	r3, [sp, #8]
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	b01c      	add	sp, #112	; 0x70
 8003e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e20:	b003      	add	sp, #12
 8003e22:	4770      	bx	lr
 8003e24:	2000000c 	.word	0x2000000c
 8003e28:	ffff0208 	.word	0xffff0208

08003e2c <__ssputs_r>:
 8003e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	688e      	ldr	r6, [r1, #8]
 8003e32:	429e      	cmp	r6, r3
 8003e34:	4682      	mov	sl, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	4690      	mov	r8, r2
 8003e3a:	4699      	mov	r9, r3
 8003e3c:	d837      	bhi.n	8003eae <__ssputs_r+0x82>
 8003e3e:	898a      	ldrh	r2, [r1, #12]
 8003e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e44:	d031      	beq.n	8003eaa <__ssputs_r+0x7e>
 8003e46:	6825      	ldr	r5, [r4, #0]
 8003e48:	6909      	ldr	r1, [r1, #16]
 8003e4a:	1a6f      	subs	r7, r5, r1
 8003e4c:	6965      	ldr	r5, [r4, #20]
 8003e4e:	2302      	movs	r3, #2
 8003e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e54:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e58:	f109 0301 	add.w	r3, r9, #1
 8003e5c:	443b      	add	r3, r7
 8003e5e:	429d      	cmp	r5, r3
 8003e60:	bf38      	it	cc
 8003e62:	461d      	movcc	r5, r3
 8003e64:	0553      	lsls	r3, r2, #21
 8003e66:	d530      	bpl.n	8003eca <__ssputs_r+0x9e>
 8003e68:	4629      	mov	r1, r5
 8003e6a:	f000 fb2b 	bl	80044c4 <_malloc_r>
 8003e6e:	4606      	mov	r6, r0
 8003e70:	b950      	cbnz	r0, 8003e88 <__ssputs_r+0x5c>
 8003e72:	230c      	movs	r3, #12
 8003e74:	f8ca 3000 	str.w	r3, [sl]
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	f04f 30ff 	mov.w	r0, #4294967295
 8003e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e88:	463a      	mov	r2, r7
 8003e8a:	6921      	ldr	r1, [r4, #16]
 8003e8c:	f000 faa8 	bl	80043e0 <memcpy>
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9a:	81a3      	strh	r3, [r4, #12]
 8003e9c:	6126      	str	r6, [r4, #16]
 8003e9e:	6165      	str	r5, [r4, #20]
 8003ea0:	443e      	add	r6, r7
 8003ea2:	1bed      	subs	r5, r5, r7
 8003ea4:	6026      	str	r6, [r4, #0]
 8003ea6:	60a5      	str	r5, [r4, #8]
 8003ea8:	464e      	mov	r6, r9
 8003eaa:	454e      	cmp	r6, r9
 8003eac:	d900      	bls.n	8003eb0 <__ssputs_r+0x84>
 8003eae:	464e      	mov	r6, r9
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	f000 fa9e 	bl	80043f6 <memmove>
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	1b9b      	subs	r3, r3, r6
 8003ebe:	60a3      	str	r3, [r4, #8]
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	441e      	add	r6, r3
 8003ec4:	6026      	str	r6, [r4, #0]
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7dc      	b.n	8003e84 <__ssputs_r+0x58>
 8003eca:	462a      	mov	r2, r5
 8003ecc:	f000 fb54 	bl	8004578 <_realloc_r>
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	d1e2      	bne.n	8003e9c <__ssputs_r+0x70>
 8003ed6:	6921      	ldr	r1, [r4, #16]
 8003ed8:	4650      	mov	r0, sl
 8003eda:	f000 faa5 	bl	8004428 <_free_r>
 8003ede:	e7c8      	b.n	8003e72 <__ssputs_r+0x46>

08003ee0 <_svfiprintf_r>:
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	461d      	mov	r5, r3
 8003ee6:	898b      	ldrh	r3, [r1, #12]
 8003ee8:	061f      	lsls	r7, r3, #24
 8003eea:	b09d      	sub	sp, #116	; 0x74
 8003eec:	4680      	mov	r8, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	d50f      	bpl.n	8003f14 <_svfiprintf_r+0x34>
 8003ef4:	690b      	ldr	r3, [r1, #16]
 8003ef6:	b96b      	cbnz	r3, 8003f14 <_svfiprintf_r+0x34>
 8003ef8:	2140      	movs	r1, #64	; 0x40
 8003efa:	f000 fae3 	bl	80044c4 <_malloc_r>
 8003efe:	6020      	str	r0, [r4, #0]
 8003f00:	6120      	str	r0, [r4, #16]
 8003f02:	b928      	cbnz	r0, 8003f10 <_svfiprintf_r+0x30>
 8003f04:	230c      	movs	r3, #12
 8003f06:	f8c8 3000 	str.w	r3, [r8]
 8003f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0e:	e0c8      	b.n	80040a2 <_svfiprintf_r+0x1c2>
 8003f10:	2340      	movs	r3, #64	; 0x40
 8003f12:	6163      	str	r3, [r4, #20]
 8003f14:	2300      	movs	r3, #0
 8003f16:	9309      	str	r3, [sp, #36]	; 0x24
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f1e:	2330      	movs	r3, #48	; 0x30
 8003f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f24:	9503      	str	r5, [sp, #12]
 8003f26:	f04f 0b01 	mov.w	fp, #1
 8003f2a:	4637      	mov	r7, r6
 8003f2c:	463d      	mov	r5, r7
 8003f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f32:	b10b      	cbz	r3, 8003f38 <_svfiprintf_r+0x58>
 8003f34:	2b25      	cmp	r3, #37	; 0x25
 8003f36:	d13e      	bne.n	8003fb6 <_svfiprintf_r+0xd6>
 8003f38:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f3c:	d00b      	beq.n	8003f56 <_svfiprintf_r+0x76>
 8003f3e:	4653      	mov	r3, sl
 8003f40:	4632      	mov	r2, r6
 8003f42:	4621      	mov	r1, r4
 8003f44:	4640      	mov	r0, r8
 8003f46:	f7ff ff71 	bl	8003e2c <__ssputs_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f000 80a4 	beq.w	8004098 <_svfiprintf_r+0x1b8>
 8003f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f52:	4453      	add	r3, sl
 8003f54:	9309      	str	r3, [sp, #36]	; 0x24
 8003f56:	783b      	ldrb	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 809d 	beq.w	8004098 <_svfiprintf_r+0x1b8>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f68:	9304      	str	r3, [sp, #16]
 8003f6a:	9307      	str	r3, [sp, #28]
 8003f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f70:	931a      	str	r3, [sp, #104]	; 0x68
 8003f72:	462f      	mov	r7, r5
 8003f74:	2205      	movs	r2, #5
 8003f76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f7a:	4850      	ldr	r0, [pc, #320]	; (80040bc <_svfiprintf_r+0x1dc>)
 8003f7c:	f7fc f928 	bl	80001d0 <memchr>
 8003f80:	9b04      	ldr	r3, [sp, #16]
 8003f82:	b9d0      	cbnz	r0, 8003fba <_svfiprintf_r+0xda>
 8003f84:	06d9      	lsls	r1, r3, #27
 8003f86:	bf44      	itt	mi
 8003f88:	2220      	movmi	r2, #32
 8003f8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f8e:	071a      	lsls	r2, r3, #28
 8003f90:	bf44      	itt	mi
 8003f92:	222b      	movmi	r2, #43	; 0x2b
 8003f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f98:	782a      	ldrb	r2, [r5, #0]
 8003f9a:	2a2a      	cmp	r2, #42	; 0x2a
 8003f9c:	d015      	beq.n	8003fca <_svfiprintf_r+0xea>
 8003f9e:	9a07      	ldr	r2, [sp, #28]
 8003fa0:	462f      	mov	r7, r5
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	250a      	movs	r5, #10
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fac:	3b30      	subs	r3, #48	; 0x30
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d94d      	bls.n	800404e <_svfiprintf_r+0x16e>
 8003fb2:	b1b8      	cbz	r0, 8003fe4 <_svfiprintf_r+0x104>
 8003fb4:	e00f      	b.n	8003fd6 <_svfiprintf_r+0xf6>
 8003fb6:	462f      	mov	r7, r5
 8003fb8:	e7b8      	b.n	8003f2c <_svfiprintf_r+0x4c>
 8003fba:	4a40      	ldr	r2, [pc, #256]	; (80040bc <_svfiprintf_r+0x1dc>)
 8003fbc:	1a80      	subs	r0, r0, r2
 8003fbe:	fa0b f000 	lsl.w	r0, fp, r0
 8003fc2:	4318      	orrs	r0, r3
 8003fc4:	9004      	str	r0, [sp, #16]
 8003fc6:	463d      	mov	r5, r7
 8003fc8:	e7d3      	b.n	8003f72 <_svfiprintf_r+0x92>
 8003fca:	9a03      	ldr	r2, [sp, #12]
 8003fcc:	1d11      	adds	r1, r2, #4
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	9103      	str	r1, [sp, #12]
 8003fd2:	2a00      	cmp	r2, #0
 8003fd4:	db01      	blt.n	8003fda <_svfiprintf_r+0xfa>
 8003fd6:	9207      	str	r2, [sp, #28]
 8003fd8:	e004      	b.n	8003fe4 <_svfiprintf_r+0x104>
 8003fda:	4252      	negs	r2, r2
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	9207      	str	r2, [sp, #28]
 8003fe2:	9304      	str	r3, [sp, #16]
 8003fe4:	783b      	ldrb	r3, [r7, #0]
 8003fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe8:	d10c      	bne.n	8004004 <_svfiprintf_r+0x124>
 8003fea:	787b      	ldrb	r3, [r7, #1]
 8003fec:	2b2a      	cmp	r3, #42	; 0x2a
 8003fee:	d133      	bne.n	8004058 <_svfiprintf_r+0x178>
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfb8      	it	lt
 8003ffc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004000:	3702      	adds	r7, #2
 8004002:	9305      	str	r3, [sp, #20]
 8004004:	4d2e      	ldr	r5, [pc, #184]	; (80040c0 <_svfiprintf_r+0x1e0>)
 8004006:	7839      	ldrb	r1, [r7, #0]
 8004008:	2203      	movs	r2, #3
 800400a:	4628      	mov	r0, r5
 800400c:	f7fc f8e0 	bl	80001d0 <memchr>
 8004010:	b138      	cbz	r0, 8004022 <_svfiprintf_r+0x142>
 8004012:	2340      	movs	r3, #64	; 0x40
 8004014:	1b40      	subs	r0, r0, r5
 8004016:	fa03 f000 	lsl.w	r0, r3, r0
 800401a:	9b04      	ldr	r3, [sp, #16]
 800401c:	4303      	orrs	r3, r0
 800401e:	3701      	adds	r7, #1
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	7839      	ldrb	r1, [r7, #0]
 8004024:	4827      	ldr	r0, [pc, #156]	; (80040c4 <_svfiprintf_r+0x1e4>)
 8004026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800402a:	2206      	movs	r2, #6
 800402c:	1c7e      	adds	r6, r7, #1
 800402e:	f7fc f8cf 	bl	80001d0 <memchr>
 8004032:	2800      	cmp	r0, #0
 8004034:	d038      	beq.n	80040a8 <_svfiprintf_r+0x1c8>
 8004036:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <_svfiprintf_r+0x1e8>)
 8004038:	bb13      	cbnz	r3, 8004080 <_svfiprintf_r+0x1a0>
 800403a:	9b03      	ldr	r3, [sp, #12]
 800403c:	3307      	adds	r3, #7
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	3308      	adds	r3, #8
 8004044:	9303      	str	r3, [sp, #12]
 8004046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004048:	444b      	add	r3, r9
 800404a:	9309      	str	r3, [sp, #36]	; 0x24
 800404c:	e76d      	b.n	8003f2a <_svfiprintf_r+0x4a>
 800404e:	fb05 3202 	mla	r2, r5, r2, r3
 8004052:	2001      	movs	r0, #1
 8004054:	460f      	mov	r7, r1
 8004056:	e7a6      	b.n	8003fa6 <_svfiprintf_r+0xc6>
 8004058:	2300      	movs	r3, #0
 800405a:	3701      	adds	r7, #1
 800405c:	9305      	str	r3, [sp, #20]
 800405e:	4619      	mov	r1, r3
 8004060:	250a      	movs	r5, #10
 8004062:	4638      	mov	r0, r7
 8004064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004068:	3a30      	subs	r2, #48	; 0x30
 800406a:	2a09      	cmp	r2, #9
 800406c:	d903      	bls.n	8004076 <_svfiprintf_r+0x196>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0c8      	beq.n	8004004 <_svfiprintf_r+0x124>
 8004072:	9105      	str	r1, [sp, #20]
 8004074:	e7c6      	b.n	8004004 <_svfiprintf_r+0x124>
 8004076:	fb05 2101 	mla	r1, r5, r1, r2
 800407a:	2301      	movs	r3, #1
 800407c:	4607      	mov	r7, r0
 800407e:	e7f0      	b.n	8004062 <_svfiprintf_r+0x182>
 8004080:	ab03      	add	r3, sp, #12
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4622      	mov	r2, r4
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <_svfiprintf_r+0x1ec>)
 8004088:	a904      	add	r1, sp, #16
 800408a:	4640      	mov	r0, r8
 800408c:	f3af 8000 	nop.w
 8004090:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004094:	4681      	mov	r9, r0
 8004096:	d1d6      	bne.n	8004046 <_svfiprintf_r+0x166>
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	065b      	lsls	r3, r3, #25
 800409c:	f53f af35 	bmi.w	8003f0a <_svfiprintf_r+0x2a>
 80040a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040a2:	b01d      	add	sp, #116	; 0x74
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a8:	ab03      	add	r3, sp, #12
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	4622      	mov	r2, r4
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <_svfiprintf_r+0x1ec>)
 80040b0:	a904      	add	r1, sp, #16
 80040b2:	4640      	mov	r0, r8
 80040b4:	f000 f882 	bl	80041bc <_printf_i>
 80040b8:	e7ea      	b.n	8004090 <_svfiprintf_r+0x1b0>
 80040ba:	bf00      	nop
 80040bc:	08004634 	.word	0x08004634
 80040c0:	0800463a 	.word	0x0800463a
 80040c4:	0800463e 	.word	0x0800463e
 80040c8:	00000000 	.word	0x00000000
 80040cc:	08003e2d 	.word	0x08003e2d

080040d0 <_printf_common>:
 80040d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	4691      	mov	r9, r2
 80040d6:	461f      	mov	r7, r3
 80040d8:	688a      	ldr	r2, [r1, #8]
 80040da:	690b      	ldr	r3, [r1, #16]
 80040dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bfb8      	it	lt
 80040e4:	4613      	movlt	r3, r2
 80040e6:	f8c9 3000 	str.w	r3, [r9]
 80040ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ee:	4606      	mov	r6, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	b112      	cbz	r2, 80040fa <_printf_common+0x2a>
 80040f4:	3301      	adds	r3, #1
 80040f6:	f8c9 3000 	str.w	r3, [r9]
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	0699      	lsls	r1, r3, #26
 80040fe:	bf42      	ittt	mi
 8004100:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004104:	3302      	addmi	r3, #2
 8004106:	f8c9 3000 	strmi.w	r3, [r9]
 800410a:	6825      	ldr	r5, [r4, #0]
 800410c:	f015 0506 	ands.w	r5, r5, #6
 8004110:	d107      	bne.n	8004122 <_printf_common+0x52>
 8004112:	f104 0a19 	add.w	sl, r4, #25
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	f8d9 2000 	ldr.w	r2, [r9]
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	42ab      	cmp	r3, r5
 8004120:	dc28      	bgt.n	8004174 <_printf_common+0xa4>
 8004122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	3300      	adds	r3, #0
 800412a:	bf18      	it	ne
 800412c:	2301      	movne	r3, #1
 800412e:	0692      	lsls	r2, r2, #26
 8004130:	d42d      	bmi.n	800418e <_printf_common+0xbe>
 8004132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004136:	4639      	mov	r1, r7
 8004138:	4630      	mov	r0, r6
 800413a:	47c0      	blx	r8
 800413c:	3001      	adds	r0, #1
 800413e:	d020      	beq.n	8004182 <_printf_common+0xb2>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	68e5      	ldr	r5, [r4, #12]
 8004144:	f8d9 2000 	ldr.w	r2, [r9]
 8004148:	f003 0306 	and.w	r3, r3, #6
 800414c:	2b04      	cmp	r3, #4
 800414e:	bf08      	it	eq
 8004150:	1aad      	subeq	r5, r5, r2
 8004152:	68a3      	ldr	r3, [r4, #8]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	bf0c      	ite	eq
 8004158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800415c:	2500      	movne	r5, #0
 800415e:	4293      	cmp	r3, r2
 8004160:	bfc4      	itt	gt
 8004162:	1a9b      	subgt	r3, r3, r2
 8004164:	18ed      	addgt	r5, r5, r3
 8004166:	f04f 0900 	mov.w	r9, #0
 800416a:	341a      	adds	r4, #26
 800416c:	454d      	cmp	r5, r9
 800416e:	d11a      	bne.n	80041a6 <_printf_common+0xd6>
 8004170:	2000      	movs	r0, #0
 8004172:	e008      	b.n	8004186 <_printf_common+0xb6>
 8004174:	2301      	movs	r3, #1
 8004176:	4652      	mov	r2, sl
 8004178:	4639      	mov	r1, r7
 800417a:	4630      	mov	r0, r6
 800417c:	47c0      	blx	r8
 800417e:	3001      	adds	r0, #1
 8004180:	d103      	bne.n	800418a <_printf_common+0xba>
 8004182:	f04f 30ff 	mov.w	r0, #4294967295
 8004186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418a:	3501      	adds	r5, #1
 800418c:	e7c3      	b.n	8004116 <_printf_common+0x46>
 800418e:	18e1      	adds	r1, r4, r3
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	2030      	movs	r0, #48	; 0x30
 8004194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004198:	4422      	add	r2, r4
 800419a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800419e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a2:	3302      	adds	r3, #2
 80041a4:	e7c5      	b.n	8004132 <_printf_common+0x62>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4622      	mov	r2, r4
 80041aa:	4639      	mov	r1, r7
 80041ac:	4630      	mov	r0, r6
 80041ae:	47c0      	blx	r8
 80041b0:	3001      	adds	r0, #1
 80041b2:	d0e6      	beq.n	8004182 <_printf_common+0xb2>
 80041b4:	f109 0901 	add.w	r9, r9, #1
 80041b8:	e7d8      	b.n	800416c <_printf_common+0x9c>
	...

080041bc <_printf_i>:
 80041bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80041c4:	460c      	mov	r4, r1
 80041c6:	7e09      	ldrb	r1, [r1, #24]
 80041c8:	b085      	sub	sp, #20
 80041ca:	296e      	cmp	r1, #110	; 0x6e
 80041cc:	4617      	mov	r7, r2
 80041ce:	4606      	mov	r6, r0
 80041d0:	4698      	mov	r8, r3
 80041d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041d4:	f000 80b3 	beq.w	800433e <_printf_i+0x182>
 80041d8:	d822      	bhi.n	8004220 <_printf_i+0x64>
 80041da:	2963      	cmp	r1, #99	; 0x63
 80041dc:	d036      	beq.n	800424c <_printf_i+0x90>
 80041de:	d80a      	bhi.n	80041f6 <_printf_i+0x3a>
 80041e0:	2900      	cmp	r1, #0
 80041e2:	f000 80b9 	beq.w	8004358 <_printf_i+0x19c>
 80041e6:	2958      	cmp	r1, #88	; 0x58
 80041e8:	f000 8083 	beq.w	80042f2 <_printf_i+0x136>
 80041ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80041f4:	e032      	b.n	800425c <_printf_i+0xa0>
 80041f6:	2964      	cmp	r1, #100	; 0x64
 80041f8:	d001      	beq.n	80041fe <_printf_i+0x42>
 80041fa:	2969      	cmp	r1, #105	; 0x69
 80041fc:	d1f6      	bne.n	80041ec <_printf_i+0x30>
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	0605      	lsls	r5, r0, #24
 8004204:	f103 0104 	add.w	r1, r3, #4
 8004208:	d52a      	bpl.n	8004260 <_printf_i+0xa4>
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	da03      	bge.n	800421a <_printf_i+0x5e>
 8004212:	222d      	movs	r2, #45	; 0x2d
 8004214:	425b      	negs	r3, r3
 8004216:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800421a:	486f      	ldr	r0, [pc, #444]	; (80043d8 <_printf_i+0x21c>)
 800421c:	220a      	movs	r2, #10
 800421e:	e039      	b.n	8004294 <_printf_i+0xd8>
 8004220:	2973      	cmp	r1, #115	; 0x73
 8004222:	f000 809d 	beq.w	8004360 <_printf_i+0x1a4>
 8004226:	d808      	bhi.n	800423a <_printf_i+0x7e>
 8004228:	296f      	cmp	r1, #111	; 0x6f
 800422a:	d020      	beq.n	800426e <_printf_i+0xb2>
 800422c:	2970      	cmp	r1, #112	; 0x70
 800422e:	d1dd      	bne.n	80041ec <_printf_i+0x30>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	f043 0320 	orr.w	r3, r3, #32
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	e003      	b.n	8004242 <_printf_i+0x86>
 800423a:	2975      	cmp	r1, #117	; 0x75
 800423c:	d017      	beq.n	800426e <_printf_i+0xb2>
 800423e:	2978      	cmp	r1, #120	; 0x78
 8004240:	d1d4      	bne.n	80041ec <_printf_i+0x30>
 8004242:	2378      	movs	r3, #120	; 0x78
 8004244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004248:	4864      	ldr	r0, [pc, #400]	; (80043dc <_printf_i+0x220>)
 800424a:	e055      	b.n	80042f8 <_printf_i+0x13c>
 800424c:	6813      	ldr	r3, [r2, #0]
 800424e:	1d19      	adds	r1, r3, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6011      	str	r1, [r2, #0]
 8004254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800425c:	2301      	movs	r3, #1
 800425e:	e08c      	b.n	800437a <_printf_i+0x1be>
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6011      	str	r1, [r2, #0]
 8004264:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004268:	bf18      	it	ne
 800426a:	b21b      	sxthne	r3, r3
 800426c:	e7cf      	b.n	800420e <_printf_i+0x52>
 800426e:	6813      	ldr	r3, [r2, #0]
 8004270:	6825      	ldr	r5, [r4, #0]
 8004272:	1d18      	adds	r0, r3, #4
 8004274:	6010      	str	r0, [r2, #0]
 8004276:	0628      	lsls	r0, r5, #24
 8004278:	d501      	bpl.n	800427e <_printf_i+0xc2>
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	e002      	b.n	8004284 <_printf_i+0xc8>
 800427e:	0668      	lsls	r0, r5, #25
 8004280:	d5fb      	bpl.n	800427a <_printf_i+0xbe>
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	4854      	ldr	r0, [pc, #336]	; (80043d8 <_printf_i+0x21c>)
 8004286:	296f      	cmp	r1, #111	; 0x6f
 8004288:	bf14      	ite	ne
 800428a:	220a      	movne	r2, #10
 800428c:	2208      	moveq	r2, #8
 800428e:	2100      	movs	r1, #0
 8004290:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004294:	6865      	ldr	r5, [r4, #4]
 8004296:	60a5      	str	r5, [r4, #8]
 8004298:	2d00      	cmp	r5, #0
 800429a:	f2c0 8095 	blt.w	80043c8 <_printf_i+0x20c>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	f021 0104 	bic.w	r1, r1, #4
 80042a4:	6021      	str	r1, [r4, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d13d      	bne.n	8004326 <_printf_i+0x16a>
 80042aa:	2d00      	cmp	r5, #0
 80042ac:	f040 808e 	bne.w	80043cc <_printf_i+0x210>
 80042b0:	4665      	mov	r5, ip
 80042b2:	2a08      	cmp	r2, #8
 80042b4:	d10b      	bne.n	80042ce <_printf_i+0x112>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	07db      	lsls	r3, r3, #31
 80042ba:	d508      	bpl.n	80042ce <_printf_i+0x112>
 80042bc:	6923      	ldr	r3, [r4, #16]
 80042be:	6862      	ldr	r2, [r4, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	bfde      	ittt	le
 80042c4:	2330      	movle	r3, #48	; 0x30
 80042c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042ce:	ebac 0305 	sub.w	r3, ip, r5
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	f8cd 8000 	str.w	r8, [sp]
 80042d8:	463b      	mov	r3, r7
 80042da:	aa03      	add	r2, sp, #12
 80042dc:	4621      	mov	r1, r4
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff fef6 	bl	80040d0 <_printf_common>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d14d      	bne.n	8004384 <_printf_i+0x1c8>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	b005      	add	sp, #20
 80042ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042f2:	4839      	ldr	r0, [pc, #228]	; (80043d8 <_printf_i+0x21c>)
 80042f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80042f8:	6813      	ldr	r3, [r2, #0]
 80042fa:	6821      	ldr	r1, [r4, #0]
 80042fc:	1d1d      	adds	r5, r3, #4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6015      	str	r5, [r2, #0]
 8004302:	060a      	lsls	r2, r1, #24
 8004304:	d50b      	bpl.n	800431e <_printf_i+0x162>
 8004306:	07ca      	lsls	r2, r1, #31
 8004308:	bf44      	itt	mi
 800430a:	f041 0120 	orrmi.w	r1, r1, #32
 800430e:	6021      	strmi	r1, [r4, #0]
 8004310:	b91b      	cbnz	r3, 800431a <_printf_i+0x15e>
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	f022 0220 	bic.w	r2, r2, #32
 8004318:	6022      	str	r2, [r4, #0]
 800431a:	2210      	movs	r2, #16
 800431c:	e7b7      	b.n	800428e <_printf_i+0xd2>
 800431e:	064d      	lsls	r5, r1, #25
 8004320:	bf48      	it	mi
 8004322:	b29b      	uxthmi	r3, r3
 8004324:	e7ef      	b.n	8004306 <_printf_i+0x14a>
 8004326:	4665      	mov	r5, ip
 8004328:	fbb3 f1f2 	udiv	r1, r3, r2
 800432c:	fb02 3311 	mls	r3, r2, r1, r3
 8004330:	5cc3      	ldrb	r3, [r0, r3]
 8004332:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004336:	460b      	mov	r3, r1
 8004338:	2900      	cmp	r1, #0
 800433a:	d1f5      	bne.n	8004328 <_printf_i+0x16c>
 800433c:	e7b9      	b.n	80042b2 <_printf_i+0xf6>
 800433e:	6813      	ldr	r3, [r2, #0]
 8004340:	6825      	ldr	r5, [r4, #0]
 8004342:	6961      	ldr	r1, [r4, #20]
 8004344:	1d18      	adds	r0, r3, #4
 8004346:	6010      	str	r0, [r2, #0]
 8004348:	0628      	lsls	r0, r5, #24
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	d501      	bpl.n	8004352 <_printf_i+0x196>
 800434e:	6019      	str	r1, [r3, #0]
 8004350:	e002      	b.n	8004358 <_printf_i+0x19c>
 8004352:	066a      	lsls	r2, r5, #25
 8004354:	d5fb      	bpl.n	800434e <_printf_i+0x192>
 8004356:	8019      	strh	r1, [r3, #0]
 8004358:	2300      	movs	r3, #0
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	4665      	mov	r5, ip
 800435e:	e7b9      	b.n	80042d4 <_printf_i+0x118>
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	1d19      	adds	r1, r3, #4
 8004364:	6011      	str	r1, [r2, #0]
 8004366:	681d      	ldr	r5, [r3, #0]
 8004368:	6862      	ldr	r2, [r4, #4]
 800436a:	2100      	movs	r1, #0
 800436c:	4628      	mov	r0, r5
 800436e:	f7fb ff2f 	bl	80001d0 <memchr>
 8004372:	b108      	cbz	r0, 8004378 <_printf_i+0x1bc>
 8004374:	1b40      	subs	r0, r0, r5
 8004376:	6060      	str	r0, [r4, #4]
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	6123      	str	r3, [r4, #16]
 800437c:	2300      	movs	r3, #0
 800437e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004382:	e7a7      	b.n	80042d4 <_printf_i+0x118>
 8004384:	6923      	ldr	r3, [r4, #16]
 8004386:	462a      	mov	r2, r5
 8004388:	4639      	mov	r1, r7
 800438a:	4630      	mov	r0, r6
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d0aa      	beq.n	80042e8 <_printf_i+0x12c>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	079b      	lsls	r3, r3, #30
 8004396:	d413      	bmi.n	80043c0 <_printf_i+0x204>
 8004398:	68e0      	ldr	r0, [r4, #12]
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	4298      	cmp	r0, r3
 800439e:	bfb8      	it	lt
 80043a0:	4618      	movlt	r0, r3
 80043a2:	e7a3      	b.n	80042ec <_printf_i+0x130>
 80043a4:	2301      	movs	r3, #1
 80043a6:	464a      	mov	r2, r9
 80043a8:	4639      	mov	r1, r7
 80043aa:	4630      	mov	r0, r6
 80043ac:	47c0      	blx	r8
 80043ae:	3001      	adds	r0, #1
 80043b0:	d09a      	beq.n	80042e8 <_printf_i+0x12c>
 80043b2:	3501      	adds	r5, #1
 80043b4:	68e3      	ldr	r3, [r4, #12]
 80043b6:	9a03      	ldr	r2, [sp, #12]
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	42ab      	cmp	r3, r5
 80043bc:	dcf2      	bgt.n	80043a4 <_printf_i+0x1e8>
 80043be:	e7eb      	b.n	8004398 <_printf_i+0x1dc>
 80043c0:	2500      	movs	r5, #0
 80043c2:	f104 0919 	add.w	r9, r4, #25
 80043c6:	e7f5      	b.n	80043b4 <_printf_i+0x1f8>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ac      	bne.n	8004326 <_printf_i+0x16a>
 80043cc:	7803      	ldrb	r3, [r0, #0]
 80043ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d6:	e76c      	b.n	80042b2 <_printf_i+0xf6>
 80043d8:	08004645 	.word	0x08004645
 80043dc:	08004656 	.word	0x08004656

080043e0 <memcpy>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	1e43      	subs	r3, r0, #1
 80043e4:	440a      	add	r2, r1
 80043e6:	4291      	cmp	r1, r2
 80043e8:	d100      	bne.n	80043ec <memcpy+0xc>
 80043ea:	bd10      	pop	{r4, pc}
 80043ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f4:	e7f7      	b.n	80043e6 <memcpy+0x6>

080043f6 <memmove>:
 80043f6:	4288      	cmp	r0, r1
 80043f8:	b510      	push	{r4, lr}
 80043fa:	eb01 0302 	add.w	r3, r1, r2
 80043fe:	d807      	bhi.n	8004410 <memmove+0x1a>
 8004400:	1e42      	subs	r2, r0, #1
 8004402:	4299      	cmp	r1, r3
 8004404:	d00a      	beq.n	800441c <memmove+0x26>
 8004406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800440e:	e7f8      	b.n	8004402 <memmove+0xc>
 8004410:	4283      	cmp	r3, r0
 8004412:	d9f5      	bls.n	8004400 <memmove+0xa>
 8004414:	1881      	adds	r1, r0, r2
 8004416:	1ad2      	subs	r2, r2, r3
 8004418:	42d3      	cmn	r3, r2
 800441a:	d100      	bne.n	800441e <memmove+0x28>
 800441c:	bd10      	pop	{r4, pc}
 800441e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004422:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004426:	e7f7      	b.n	8004418 <memmove+0x22>

08004428 <_free_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4605      	mov	r5, r0
 800442c:	2900      	cmp	r1, #0
 800442e:	d045      	beq.n	80044bc <_free_r+0x94>
 8004430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004434:	1f0c      	subs	r4, r1, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfb8      	it	lt
 800443a:	18e4      	addlt	r4, r4, r3
 800443c:	f000 f8d2 	bl	80045e4 <__malloc_lock>
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <_free_r+0x98>)
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	4610      	mov	r0, r2
 8004446:	b933      	cbnz	r3, 8004456 <_free_r+0x2e>
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	6014      	str	r4, [r2, #0]
 800444c:	4628      	mov	r0, r5
 800444e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004452:	f000 b8c8 	b.w	80045e6 <__malloc_unlock>
 8004456:	42a3      	cmp	r3, r4
 8004458:	d90c      	bls.n	8004474 <_free_r+0x4c>
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	1862      	adds	r2, r4, r1
 800445e:	4293      	cmp	r3, r2
 8004460:	bf04      	itt	eq
 8004462:	681a      	ldreq	r2, [r3, #0]
 8004464:	685b      	ldreq	r3, [r3, #4]
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	bf04      	itt	eq
 800446a:	1852      	addeq	r2, r2, r1
 800446c:	6022      	streq	r2, [r4, #0]
 800446e:	6004      	str	r4, [r0, #0]
 8004470:	e7ec      	b.n	800444c <_free_r+0x24>
 8004472:	4613      	mov	r3, r2
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	b10a      	cbz	r2, 800447c <_free_r+0x54>
 8004478:	42a2      	cmp	r2, r4
 800447a:	d9fa      	bls.n	8004472 <_free_r+0x4a>
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	1858      	adds	r0, r3, r1
 8004480:	42a0      	cmp	r0, r4
 8004482:	d10b      	bne.n	800449c <_free_r+0x74>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	4401      	add	r1, r0
 8004488:	1858      	adds	r0, r3, r1
 800448a:	4282      	cmp	r2, r0
 800448c:	6019      	str	r1, [r3, #0]
 800448e:	d1dd      	bne.n	800444c <_free_r+0x24>
 8004490:	6810      	ldr	r0, [r2, #0]
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	4401      	add	r1, r0
 8004498:	6019      	str	r1, [r3, #0]
 800449a:	e7d7      	b.n	800444c <_free_r+0x24>
 800449c:	d902      	bls.n	80044a4 <_free_r+0x7c>
 800449e:	230c      	movs	r3, #12
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	e7d3      	b.n	800444c <_free_r+0x24>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428a      	cmp	r2, r1
 80044aa:	bf04      	itt	eq
 80044ac:	6811      	ldreq	r1, [r2, #0]
 80044ae:	6852      	ldreq	r2, [r2, #4]
 80044b0:	6062      	str	r2, [r4, #4]
 80044b2:	bf04      	itt	eq
 80044b4:	1809      	addeq	r1, r1, r0
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	605c      	str	r4, [r3, #4]
 80044ba:	e7c7      	b.n	800444c <_free_r+0x24>
 80044bc:	bd38      	pop	{r3, r4, r5, pc}
 80044be:	bf00      	nop
 80044c0:	20000094 	.word	0x20000094

080044c4 <_malloc_r>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	1ccd      	adds	r5, r1, #3
 80044c8:	f025 0503 	bic.w	r5, r5, #3
 80044cc:	3508      	adds	r5, #8
 80044ce:	2d0c      	cmp	r5, #12
 80044d0:	bf38      	it	cc
 80044d2:	250c      	movcc	r5, #12
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	4606      	mov	r6, r0
 80044d8:	db01      	blt.n	80044de <_malloc_r+0x1a>
 80044da:	42a9      	cmp	r1, r5
 80044dc:	d903      	bls.n	80044e6 <_malloc_r+0x22>
 80044de:	230c      	movs	r3, #12
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	2000      	movs	r0, #0
 80044e4:	bd70      	pop	{r4, r5, r6, pc}
 80044e6:	f000 f87d 	bl	80045e4 <__malloc_lock>
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <_malloc_r+0xac>)
 80044ec:	6814      	ldr	r4, [r2, #0]
 80044ee:	4621      	mov	r1, r4
 80044f0:	b991      	cbnz	r1, 8004518 <_malloc_r+0x54>
 80044f2:	4c20      	ldr	r4, [pc, #128]	; (8004574 <_malloc_r+0xb0>)
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	b91b      	cbnz	r3, 8004500 <_malloc_r+0x3c>
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 f863 	bl	80045c4 <_sbrk_r>
 80044fe:	6020      	str	r0, [r4, #0]
 8004500:	4629      	mov	r1, r5
 8004502:	4630      	mov	r0, r6
 8004504:	f000 f85e 	bl	80045c4 <_sbrk_r>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d124      	bne.n	8004556 <_malloc_r+0x92>
 800450c:	230c      	movs	r3, #12
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	4630      	mov	r0, r6
 8004512:	f000 f868 	bl	80045e6 <__malloc_unlock>
 8004516:	e7e4      	b.n	80044e2 <_malloc_r+0x1e>
 8004518:	680b      	ldr	r3, [r1, #0]
 800451a:	1b5b      	subs	r3, r3, r5
 800451c:	d418      	bmi.n	8004550 <_malloc_r+0x8c>
 800451e:	2b0b      	cmp	r3, #11
 8004520:	d90f      	bls.n	8004542 <_malloc_r+0x7e>
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	50cd      	str	r5, [r1, r3]
 8004526:	18cc      	adds	r4, r1, r3
 8004528:	4630      	mov	r0, r6
 800452a:	f000 f85c 	bl	80045e6 <__malloc_unlock>
 800452e:	f104 000b 	add.w	r0, r4, #11
 8004532:	1d23      	adds	r3, r4, #4
 8004534:	f020 0007 	bic.w	r0, r0, #7
 8004538:	1ac3      	subs	r3, r0, r3
 800453a:	d0d3      	beq.n	80044e4 <_malloc_r+0x20>
 800453c:	425a      	negs	r2, r3
 800453e:	50e2      	str	r2, [r4, r3]
 8004540:	e7d0      	b.n	80044e4 <_malloc_r+0x20>
 8004542:	428c      	cmp	r4, r1
 8004544:	684b      	ldr	r3, [r1, #4]
 8004546:	bf16      	itet	ne
 8004548:	6063      	strne	r3, [r4, #4]
 800454a:	6013      	streq	r3, [r2, #0]
 800454c:	460c      	movne	r4, r1
 800454e:	e7eb      	b.n	8004528 <_malloc_r+0x64>
 8004550:	460c      	mov	r4, r1
 8004552:	6849      	ldr	r1, [r1, #4]
 8004554:	e7cc      	b.n	80044f0 <_malloc_r+0x2c>
 8004556:	1cc4      	adds	r4, r0, #3
 8004558:	f024 0403 	bic.w	r4, r4, #3
 800455c:	42a0      	cmp	r0, r4
 800455e:	d005      	beq.n	800456c <_malloc_r+0xa8>
 8004560:	1a21      	subs	r1, r4, r0
 8004562:	4630      	mov	r0, r6
 8004564:	f000 f82e 	bl	80045c4 <_sbrk_r>
 8004568:	3001      	adds	r0, #1
 800456a:	d0cf      	beq.n	800450c <_malloc_r+0x48>
 800456c:	6025      	str	r5, [r4, #0]
 800456e:	e7db      	b.n	8004528 <_malloc_r+0x64>
 8004570:	20000094 	.word	0x20000094
 8004574:	20000098 	.word	0x20000098

08004578 <_realloc_r>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	4607      	mov	r7, r0
 800457c:	4614      	mov	r4, r2
 800457e:	460e      	mov	r6, r1
 8004580:	b921      	cbnz	r1, 800458c <_realloc_r+0x14>
 8004582:	4611      	mov	r1, r2
 8004584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004588:	f7ff bf9c 	b.w	80044c4 <_malloc_r>
 800458c:	b922      	cbnz	r2, 8004598 <_realloc_r+0x20>
 800458e:	f7ff ff4b 	bl	8004428 <_free_r>
 8004592:	4625      	mov	r5, r4
 8004594:	4628      	mov	r0, r5
 8004596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004598:	f000 f826 	bl	80045e8 <_malloc_usable_size_r>
 800459c:	42a0      	cmp	r0, r4
 800459e:	d20f      	bcs.n	80045c0 <_realloc_r+0x48>
 80045a0:	4621      	mov	r1, r4
 80045a2:	4638      	mov	r0, r7
 80045a4:	f7ff ff8e 	bl	80044c4 <_malloc_r>
 80045a8:	4605      	mov	r5, r0
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d0f2      	beq.n	8004594 <_realloc_r+0x1c>
 80045ae:	4631      	mov	r1, r6
 80045b0:	4622      	mov	r2, r4
 80045b2:	f7ff ff15 	bl	80043e0 <memcpy>
 80045b6:	4631      	mov	r1, r6
 80045b8:	4638      	mov	r0, r7
 80045ba:	f7ff ff35 	bl	8004428 <_free_r>
 80045be:	e7e9      	b.n	8004594 <_realloc_r+0x1c>
 80045c0:	4635      	mov	r5, r6
 80045c2:	e7e7      	b.n	8004594 <_realloc_r+0x1c>

080045c4 <_sbrk_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4c06      	ldr	r4, [pc, #24]	; (80045e0 <_sbrk_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4605      	mov	r5, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	f7fd fa60 	bl	8001a94 <_sbrk>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_sbrk_r+0x1a>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	b103      	cbz	r3, 80045de <_sbrk_r+0x1a>
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	200003ec 	.word	0x200003ec

080045e4 <__malloc_lock>:
 80045e4:	4770      	bx	lr

080045e6 <__malloc_unlock>:
 80045e6:	4770      	bx	lr

080045e8 <_malloc_usable_size_r>:
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f18      	subs	r0, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfbc      	itt	lt
 80045f2:	580b      	ldrlt	r3, [r1, r0]
 80045f4:	18c0      	addlt	r0, r0, r3
 80045f6:	4770      	bx	lr

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
